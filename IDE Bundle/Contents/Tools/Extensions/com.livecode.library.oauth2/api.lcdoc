Library: com.livecode.library.oauth2

Type: library

Title: OAuth2 Library

Version: 1.0.0

Author: LiveCode

Description:
Present an authorization dialog for any web service that supports 
OAuth2 Authorization Code Flow 

Name: OAuth2Refresh

Type: command

Syntax: OAuth2Refresh <pTokenURL>,<pClientID>,<pClientSecret>,<pRefreshToken>,<pPort>

Summary: Obtain a new authorization token using a refresh token

Description:
Access tokens have limited lifetimes. If your application needs access to
an API beyond the lifetime of a single access token, it can obtain a refresh 
token. A refresh token allows your application to obtain new access tokens.

> *Note*: Save refresh tokens in secure long-term storage and continue to
> use them as long as they remain valid. Limits apply to the number of
> refresh tokens that are issued per client-user combination, and per
> user across all clients, and these limits are different. If your application
> requests enough refresh tokens to go over one of the limits, older refresh
> tokens stop working.

Example:
constant kTokenURL = "https://www.googleapis.com/oauth2/v4/token"
constant kClientID = "XXXXXXXXXXXXXXXXXXXXXXX"
constant kClientSecret = "XXXXXXXXXXXXXXXXXXXXXXX"

local sAuth

private command __RefreshAuth
   if sAuth is not an array then
      return "No authorization info available" for error
   end if

   OAuth2Refresh kTokenURL, kClientID, kClientSecret, sAuth["refresh_token"], 59004
   if the result is empty then
      put it into sAuth
   else
      return "Not authorized" for error
   end if

   set the httpHeaders to "Authorization: Bearer "& sAuth["access_token"]
   return empty for error
end __RefreshAuth

Parameters: 

pTokenURL:
The URL to obtain the authorization token from once an authorization code is
sent to the redirect uri. This can be obtained from the API documentation of the service being
authorized.

pClientID:
The application client ID obtained when setting up your application with
the web service.

pClientSecret:
The application client secret obtained when setting up your application with
the web service.

pRefreshToken: The refresh token obtained from a previous OAuth 2 authorization.

pPort: The port to use for the redirect uri. It is recommended to use the range 49152-65535.

The result: An error string if an error occurred during authorization

It: An array containing the parsed JSON data returned by the token url




Name: OAuth2

Type: command

Syntax: OAuth2 <pAuthURL>,<pTokenURL>,<pClientID>,<pClientSecret>,<pScopes>,<pPort>,<pParams>

Summary: Present an authorization dialog for any web service that supports OAuth2 Authorization Code Flow

Description:
In order to handle the redirect the library accepts socket connections on localhost on a
configurable port. The redirect uri configured when setting up your application with the
web service should be `http://127.0.0.1:port` where `port` is the port that can be
configured with the port parameter. It is recommended to use the range 49152-65535.

> **Warning:** The client secret should be kept securely when distributing an application in
> order to protect your application from malicious use. The recommended way to do this is to
> include the client secret into a script in a password protected stack. If that is not possible
> allow users to configure their own application with the web service and enter their own
> client id and secret into a preference instead of distributing your client id and  secret.

Example:
constant kAuthURL = "https://slack.com/oauth/authorize"
constant kTokenURL = "https://slack.com/api/oauth.access"
constant kClientID = "XXXXXXXXX.XXXXXXXX"
constant kClientSecret = "XXXXXXXXXXXXXXXXXXXXX"
constant kScopes = "incoming-webhook"

OAuth2 kAuthURL, kTokenURL, kClientID, kClientSecret, kScopes, 54303
if the result is not empty then
   answer error "Not authorized!" 
else
   local tAuth
   put it into tAuth
   local tMessage
   ask question "What do you want to send?"
   if it is empty then
      exit mouseUp
   end if

   put it into tMessage["text"]
   put ArrayToJSON(tMessage) into tMessage

   set the httpHeaders to "Content-type: application/json" & \
         return & "Authorization: token " & sAuth["access_token"]
   post tMessage to url tAuth["incoming_webhook"]["url"]
end if

Parameters: 

pAuthURL:
The URL to present for the authorization page. This can be obtained from the
API documentation of the service being authorized.

pTokenURL:
The URL to obtain the authorization token from once an authorization code is
sent to the redirect uri. This can be obtained from the API documentation of the service being
authorized.

pClientID:
The application client ID obtained when setting up your application with
the web service.

pClientSecret:
The application client secret obtained when setting up your application with
the web service.

pScopes:
A comma delimited list of authorization scopes. Valid scopes will be found
in the API documentation of the service being authorized. If empty the scope parameter will be
omitted.

pPort: The port to use for the redirect uri. It is recommended to use the range 49152-65535.

pParams:
An array of additional key -> value pairs of extra parameters to be sent to
the authorization url. Some services implement additional options that require extra parameters.

The result: An error string if an error occurred during authorization

It: An array containing the parsed JSON data returned by the token url




