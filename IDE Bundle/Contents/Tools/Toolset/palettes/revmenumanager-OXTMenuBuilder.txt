OXT Menu Builder
by Terry Little (c) 11/2022
portions from LiveCode Use Guide.pdf (c) LiveCode LTD

Using Menu Builder
Menu Builder simplifies creating and editing a standard menu bar that works correctly for all platforms. On Windows and Linux, menus built with Menu Builder will appear at the top of the window. On Mac they will appear in the main menu bar.

File > New Stack or Open, for an existing stack, then Tools > Menu Builder. Menu Builder will insert a basic pull-down menu bar on the toplevel stack by clicking the New button in the Menu Bar area.

* Preview: This option allows a preview of the new menu bar in the main menu bar area where the option Set As Stack Menu Bar has been turned on. Important: To bring back the LiveCode development menu bar when working with a stack that has this option turned on, click on a LiveCode IDE window such as the Tool bar or Tools palette.

* Menu Bar Area: This area specifies the main settings for the menu bar.
New: create a new menu bar in the current top most editable stack. Enter the name for the menu bar in the text area.
Delete: permanently delete the menu bar.
Edit: load an existing menu bar from the top most editable stack to edit in the area below.
Auto Menu Bar Script: insert a framework mouseDown handler in the menu bar group's script to manage enable/disable menuItems.
Edit Menu Bar Script: edit the menu bar group's script. In a mouseDown handler create a switch/case/break structure to manage enable/disable menuItems. An example is in the Edit menu code below.

* Menu Edit Area: This area specifies which menu to work on from a scrolling list.
File, Edit, and Help menus are required. These menus are created automatically when creating a new menu bar.
New Menu: add a new menu below the orange divider bar.
Disable: disable the selected menu.
Mnemonic: choose an alt-keyboard shortcut for the selected menu, the menu name char that is underlined. (win/linux)
To move a menu within the list: select it and press the up or down arrows.

* MenuItems Edit Area: This area specifies which menu's menuItems to work on from a scrolling list.
Hilite Item: select a menuItem to work on.
New Item: add a new menuItem below the orange divider bar.
Divider: add a divider line below the orange divider bar. "-"
Tag: add a tag to the selected menuItem to display the menuItem in a different language and still receive the same param in a menuPick handler.
Disable: disable the selected menuItem. "("
Mneumonic: choose an alt-keyboard shortcut for the selected menuItem, the menuItem name char is underlined. (win/linux) "&"
Mark: add a checkmark or diamond mark to the selected menuItem. check="!c", diamond="!r"
Keyboard Shortcut: add a ctrl/cmd-keyboard shortcut for the selected menuItem, enter a capital letter for the key. "/"
To add a complex ctrl/cmd-keyboard shortcut, check the desired combination. Examples: ctrl-shift-S, cmd-shift-O.

To move a menuItem within the list: select it and press the up or down arrows.
To move menuItems into a subMenuItem: select it and press the right arrow. "tab"
To move a subMenuItem back: select it and press the left arrow.
Add menuItem special characters in top-down order: disable, mneumonic, mark, ctrl/cmd-keyboard shortcut.

* Scripting A Menu Button
Auto Script: automatically insert a framework menuPick message handler with an empty switch/case/break structure in the script for the currently selected menu button. This must be done for each menu after its menuItems are completed. There are spaces to insert actions for each of the menuItems. Use Auto Script before Edit Script, when finished creating a menu and finalizing its menuItems.

Edit Script: open the script editor for the currently selected menu to edit the menuPick message handler and manage check/diamond mark menuItems. An example is in the Edit menu code below.

manage enable/disable in mouseDown handler in grp script of menubar.
manage check/diamond in menuPick handler in script of menu button.
==========

MenuItem Special Characters
-   --divider line (pull-down, pop-up)
/   --next char = keyboard equivalent
&  --underline next char = keyboard mnemonic
!c  --checkmark
!n  --remove checkmark
!r   --diamond
!u  --remove diamond
tab --create cascade subMenuItem, place tab before special chars
&& --"&" in menu or menuItem text
//  --"/" in menu or menuItem text
\(  --"(" in menu or menuItem text
\)  --")" in menu or menuItem text

|  --pipe separates menuItem from subMenuItem in menuPick param pWhich:
set the itemDel to "|"
put item -1 of pWhich into tChoice  --pWhich = "Sounds|Flute", tChoice = "Flute"
set the itemDel to ","  --default
==========

Code For Basic Pull-Down Menu (File Edit Help)
Menu Builder's Auto Script button automatically inserts a framework menuPick message handler in the script of the selected menu button, but the switch/case/break code there is empty. The menu doesn't do anything. Below are File, Edit, and Help menu button codes to add into their scripts. Edit requires code added to the stack script and group menu bar script too.

-----------------------------
* File Menu (add into the script of btn "File")

on menuPick pWhich  --file menu for no-save standalone application
   switch pWhich
      case "New"
         answer "Sorry, a new stack or card cannot be created." with "OK" titled "New"
         break
      case "Open"
         answer "Sorry, an existing stack cannot be opened." with "OK" titled "Open"
         break
      case "Close"
         close this stack
         break
         ----divider
      case "Quit"
         quit
         break
   end switch
end menuPick
-----------------------------
* Edit Menu (add into the script of btn "Edit")

on menuPick pWhich  --edit menu
   switch pWhich
      case "Undo"
         undo
         break
         ----divider
      case "Cut"
         cut
         break
      case "Copy"
         copy
         break
      case "Paste"
         paste
         break
      case "Clear"
         put empty into the selection
         break
         ----divider
      case "Sounds"  --manage enable/disable checkmark
         get lineOffset("Sounds",me)  --line# to toggle mark (!c = check, !r = diamond)
         if char 1 to 2 of line it of me = "!c" then delete char 1 to 2 of line it of me  --no check
         else put "!c" before line it of me  --check
         set the cSounds of me to (char 1 to 2 of line it of me = "!c")  --true if check, in custom prop cSounds
         if the cSounds of me then play "TaDa.wav"  --true, in stack, import only .wav, .aiff, .au
         break
      case "Preferences"
         if there is a cd "Preferences" then go cd "Preferences"
         else if there is a stack "Preferences" then SubstackPreferences
         else answer "Sorry, no preferences." with "OK" titled "Preferences"
         break
   end switch
end menuPick

command SubstackPreferences
   local tData
   modal stack "Preferences"  --open substack as modal dialog
   put the dialogData into tData  --data collected from dialog
   if tData = empty then exit to top  --cancel btn, no changes
   answer "Changes to preferences take effect after closing." with "OK" titled "Preferences"
   --*or update with new preferences here
   set the itemDel to "/"
   put item 1 to -2 of (the effective fileName of this stack) &"/DataFiles" into RelativePath
   set the itemDel to comma  --default
   if there is not a folder RelativePath then new folder RelativePath  --new folder
   put tData into url ("file:" &RelativePath &"/BlankStkPrefs18944.txt")    --save preferences to relative folder (*use different name/number)
   if result() <> empty then answer "Sorry, there was a problem saving to a .txt preferences file." with "OK" titled "Save Preferences"
end SubstackPreferences
-----------------------------
* Edit Menu: (paste into the main stack script)

on commandKeyDown pKey  --cross-platform
   if pKey = "c" then copy
   else if pKey = "v" then paste
   else if pkey = "x" then cut
   else pass commandKeyDown
end commandKeyDown
-----------------------------
* Edit Menu: (paste into the group "Menubar 1" script)

on mouseDown  --enable/disable menuItems
   switch (the short name of target())
      case "File"
        --file menuItems
        break
      case "Edit"
         get selectedChunk()
         if it = empty then  --no inserted cursor, no selected text
            disable menuItem 1 of menu "Edit"  --cut
            disable menuItem 2 of menu "Edit"  --copy
            disable menuItem 3 of menu "Edit"  --paste
         else if word 2 of it > word 4 of it then  --inserted cursor
            disable menuItem 1 of menu "Edit"  --cut
            disable menuItem 2 of menu "Edit"  --copy
            enable menuItem 3 of menu "Edit"  --paste
         else  --selected text
            enable menuItem 1 of menu "Edit"  --cut
            enable menuItem 2 of menu "Edit"  --copy
            enable menuItem 3 of menu "Edit"  --paste
         end if
         break
      case "Help"
        --help menuItems
        break
   end switch
end mouseDown
-----------------------------
* Help Menu (add into the script of btn "Help")

on menuPick pWhich  --help menu
   switch pWhich
      case "Help"
         if there is a cd "Help" then go cd "Help"
         else if there is a stack "Help" then modal stack "Help"  --open substack as modal dialog
         else answer "Sorry, no help available." with "OK" titled "Help"
         break
         ----divider
      case "About"
         if there is a cd "About" then go cd "About"
         else if there is a stack "About" then modal stack "About"  --open substack as modal dialog
         else answer "Blank NoSave v1.0, by J.B. Smith" &cr& "SmithJB437@mymail.com" &cr& "Latest Update: SmithJB437.tripod.com/index.html" with "OK" titled "About"
         break
   end switch
end menuPick
==========