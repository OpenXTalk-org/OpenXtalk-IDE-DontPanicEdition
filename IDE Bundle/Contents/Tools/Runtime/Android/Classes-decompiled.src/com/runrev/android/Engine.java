/*      */ package com.runrev.android;public class Engine extends View implements EngineApi { public static final String TAG = "revandroid.Engine"; private static boolean s_running; private static Engine s_engine_instance; private Handler m_handler; private boolean m_wake_on_event; private boolean m_wake_scheduled; private boolean m_video_is_playing; private VideoControl m_video_control; private BusyIndicator m_busy_indicator_module; private TextMessaging m_text_messaging_module; private Alert m_beep_vibrate_module; private Contact m_contact_module; private CalendarEvents m_calendar_module; private OpenGLView m_opengl_view; private boolean m_disabling_opengl; private boolean m_enabling_opengl; private BitmapView m_bitmap_view; private File m_temp_image_file; private Email m_email; private ShakeEventListener m_shake_listener; private ScreenOrientationEventListener m_orientation_listener; private boolean m_text_editor_visible; private int m_text_editor_mode; private int m_default_text_editor_mode; private int m_default_ime_action; private int m_ime_action; private SensorModule m_sensor_module; private DialogModule m_dialog_module; private NetworkModule m_network_module; private NativeControlModule m_native_control_module; private SoundModule m_sound_module; private NotificationModule m_notification_module; private NFCModule m_nfc_module; private AbsoluteLayout m_view_layout; private PowerManager.WakeLock m_wake_lock; private Collator m_collator; private X509TrustManager m_trust_manager; private String m_last_certificate_verification_error; private boolean m_new_intent; private int m_photo_width; private int m_photo_height; private int m_jpeg_quality; private int m_night_mode; private List<LifecycleListener> m_lifecycle_listeners;
/*      */   public void wakeEngineThread() { post(new Runnable() { public void run() { if (Engine.this.m_wake_on_event)
/*      */               Engine.doProcess(false);  } }); }
/*      */   public void nativeNotify(long paramLong1, long paramLong2) { final long t_callback = paramLong1; final long t_context = paramLong2; post(new Runnable() { public void run() { Engine.s_engine_instance; Engine.doNativeNotify(t_callback, t_context); } }); }
/*      */   public static boolean isRunning() { return s_running; }
/*      */   public static Engine getEngine() { return s_engine_instance; }
/*      */   public void showSplashScreen() { this.m_bitmap_view.showSplashScreen(); }
/*      */   public void hideSplashScreen() { this.m_bitmap_view.hideSplashScreen(); }
/*      */   public void clearWakeUp() { if (this.m_wake_scheduled) {
/*      */       this.m_handler.removeMessages(0); this.m_wake_scheduled = false;
/*      */     }  }
/*      */   public synchronized void scheduleWakeUp(int paramInt, boolean paramBoolean) { if (this.m_wake_scheduled) {
/*      */       this.m_handler.removeMessages(0); this.m_wake_scheduled = false;
/*      */     }  this.m_wake_scheduled = true; this.m_wake_on_event = paramBoolean; this.m_handler.sendEmptyMessageDelayed(0, paramInt); }
/*      */   public String getPackagePath() { return (getContext().getApplicationInfo()).sourceDir; }
/*      */   public String getLibraryPath() { return (getContext().getApplicationInfo()).nativeLibraryDir; }
/*      */   public void finishActivity() { if (this.m_sensor_module != null)
/*      */       this.m_sensor_module.finish();  ((LiveCodeActivity)getContext()).finish(); }
/*      */   public String loadExternalLibrary(String paramString) { try {
/*      */       System.loadLibrary(paramString); return System.mapLibraryName(paramString);
/*      */     } catch (UnsatisfiedLinkError unsatisfiedLinkError) {
/*      */       Log.i("revandroid", unsatisfiedLinkError.toString()); return null;
/*      */     } catch (SecurityException securityException) {
/*      */       Log.i("revandroid", securityException.toString()); return null;
/*      */     }  }
/*      */   public void onConfigurationChanged(Configuration paramConfiguration) { int i = (getContext().getResources().getConfiguration()).uiMode & 0x30; if (i != this.m_night_mode) {
/*      */       this.m_night_mode = i; doSystemAppearanceChanged();
/*      */     }  }
/*      */   public float getPixelDensity() { DisplayMetrics displayMetrics = new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(displayMetrics); return displayMetrics.density; }
/*      */   public String getBuildInfo(String paramString) { try {
/*      */       if (paramString.startsWith("VERSION.")) {
/*      */         Class<?> clazz1 = Class.forName("android.os.Build$VERSION"); Field field1 = clazz1.getField(paramString.substring(paramString.indexOf('.') + 1)); return field1.get(null).toString();
/*      */       }  Class<?> clazz = Class.forName("android.os.Build"); Field field = clazz.getField(paramString); return field.get(null).toString();
/*      */     } catch (Exception exception) {
/*      */       Log.i("revandroid", exception.toString()); return null;
/*      */     }  }
/*      */   public int getDeviceRotation() { return this.m_orientation_listener.getOrientation(); }
/*      */   public int getDisplayOrientation() { return (getContext().getResources().getConfiguration()).orientation; }
/*      */   public int getDisplayRotation() { WindowManager windowManager = (WindowManager)getContext().getSystemService("window"); Display display = windowManager.getDefaultDisplay(); switch (display.getRotation()) {
/*      */       case 0:
/*      */         return 0;
/*      */       case 1:
/*      */         return 270;
/*      */       case 2:
/*      */         return 180;
/*      */       case 3:
/*      */         return 90;
/*      */     }  return 0; }
/*      */   private static final int[] s_orientation_map = new int[] { 1, 8, 9, 0 }; private static final int KEYBOARD_DISPLAY_OVER = 0; private static final int KEYBOARD_DISPLAY_PAN = 1; public static final int TYPE_NUMBER_VARIATION_PASSWORD = 16; static final String s_external_prefix = "external "; private boolean m_know_portrait_size; private boolean m_know_landscape_size; private boolean m_know_statusbar_size; private Rect m_portrait_rect; private Rect m_landscape_rect; private int m_statusbar_size; private static final int STATUS_BAR_VISIBLE = 0; private static final int STATUS_BAR_HIDDEN = 1; private boolean m_keyboard_sizechange; private boolean m_orientation_sizechange; private boolean m_keyboard_visible; public static final int PERMISSION_REQUEST_CODE = 1; private static final int IMAGE_RESULT = 1; private static final int EMAIL_RESULT = 2; private static final int LAUNCHURL_RESULT = 3; private static final int TEXT_RESULT = 4; private static final int MEDIA_RESULT = 5; private static final int PICK_CONTACT_RESULT = 6; private static final int CREATE_CONTACT_RESULT = 7; private static final int UPDATE_CONTACT_RESULT = 8; private static final int SHOW_CONTACT_RESULT = 9; private static final int PICK_CALENDAR_RESULT = 10; private static final int CREATE_CALENDAR_RESULT = 11; private static final int UPDATE_CALENDAR_RESULT = 12; private static final int SHOW_CALENDAR_RESULT = 13; private static final int GOOGLE_BILLING_RESULT = 10001; private static final int SAMSUNG_BILLING_RESULT = 100; private static final int SAMSUNG_ACCOUNT_CERTIFICATION_RESULT = 101; private static final int RUN_ACTIVITY_RESULT = 14; public static BillingModule mBillingModule; public static BillingProvider mBillingProvider; public EnginePurchaseObserver mPurchaseObserver; private boolean m_pending_activity_running; private int m_pending_activity_result_code; private Intent m_pending_activity_data; Context m_service_context; ArrayList<ServiceListener> m_running_services; ArrayList<ServiceListener> m_pending_services;
/*      */   public void setDisplayOrientation(int paramInt) { if ((paramInt == 1 || paramInt == 2) && Build.VERSION.SDK_INT < 9)
/*      */       return;  updateOrientation(paramInt); ((LiveCodeActivity)getContext()).setRequestedOrientation(s_orientation_map[paramInt]); }
/*      */   public InputConnection onCreateInputConnection(EditorInfo paramEditorInfo) { Log.i("revandroid.Engine", "onCreateInputConnection()"); if (!this.m_text_editor_visible)
/*      */       return null;  BaseInputConnection baseInputConnection = new BaseInputConnection(this, true) { String m_current_text = "";
/*      */         void handleKey(int param1Int1, int param1Int2) { if (param1Int2 == 0) {
/*      */             switch (param1Int1) {
/*      */               case 67:
/*      */                 param1Int1 = 65288; break;
/*      */               case 21:
/*      */                 param1Int1 = 65361; break;
/*      */               case 19:
/*      */                 param1Int1 = 65362; break;
/*      */               case 22:
/*      */                 param1Int1 = 65363; break;
/*      */               case 20:
/*      */                 param1Int1 = 65364; break;
/*      */             } 
/*      */           } else if (param1Int2 == 10) {
/*      */             param1Int2 = 0; param1Int1 = 65293;
/*      */           }  Log.i("revandroid.Engine", "doing keypress for char " + param1Int2); Engine.doKeyPress(0, param1Int2, param1Int1); }
/*      */         public boolean sendKeyEvent(KeyEvent param1KeyEvent) { int i = param1KeyEvent.getKeyCode(); int j = param1KeyEvent.getUnicodeChar(); if (param1KeyEvent.getAction() == 0) {
/*      */             handleKey(i, j);
/*      */           } else if (param1KeyEvent.getAction() == 2) {
/*      */             if (i == 0) {
/*      */               String str = param1KeyEvent.getCharacters(); for (byte b = 0; b < str.length(); b++)
/*      */                 handleKey(i, str.charAt(b)); 
/*      */             } else {
/*      */               for (byte b = 0; b < param1KeyEvent.getRepeatCount(); b++)
/*      */                 handleKey(i, j); 
/*      */             } 
/*      */           }  if (Engine.this.m_wake_on_event)
/*      */             Engine.doProcess(false);  return true; }
/*      */         void updateComposingText() { String str = getEditable().toString(); byte b1 = 0; int i = 0; int j = 0; int k = 0; i = this.m_current_text.length(); j = str.length(); k = Math.min(i, j); byte b2; for (b2 = 0; b2 < k; b2++) {
/*      */             if (str.charAt(b2) != this.m_current_text.charAt(b2))
/*      */               break;  b1++;
/*      */           }  for (b2 = 0; b2 < i - b1; b2++)
/*      */             handleKey(67, 0);  for (b2 = b1; b2 < j; b2++)
/*      */             handleKey(0, str.charAt(b2));  this.m_current_text = str; if (Engine.this.m_wake_on_event)
/*      */             Engine.doProcess(false);  }
/*      */         public boolean commitText(CharSequence param1CharSequence, int param1Int) { boolean bool = super.commitText(param1CharSequence, param1Int); updateComposingText(); return bool; }
/*      */         public boolean finishComposingText() { boolean bool = super.finishComposingText(); updateComposingText(); return bool; }
/*      */         public boolean setComposingText(CharSequence param1CharSequence, int param1Int) { boolean bool = super.setComposingText(param1CharSequence, param1Int); updateComposingText(); return bool; }
/*      */         public boolean performEditorAction(int param1Int) { handleKey(0, 10); return true; }
/*      */         public boolean deleteSurroundingText(int param1Int1, int param1Int2) { boolean bool = super.deleteSurroundingText(param1Int1, param1Int2); updateComposingText(); return bool; } }; int i = getInputType(false); paramEditorInfo.actionLabel = null; paramEditorInfo.inputType = i; if (this.m_ime_action != 0) {
/*      */       paramEditorInfo.imeOptions = 0x10000000 | this.m_ime_action;
/*      */     } else {
/*      */       paramEditorInfo.imeOptions = 0x10000000 | this.m_default_ime_action;
/*      */     }  return (InputConnection)baseInputConnection; }
/*      */   public void showKeyboard() { if (!this.m_text_editor_visible)
/*      */       return;  requestFocus(); InputMethodManager inputMethodManager = (InputMethodManager)getContext().getSystemService("input_method"); if (inputMethodManager != null)
/*      */       inputMethodManager.restartInput(this);  inputMethodManager.showSoftInput(this, 2); }
/*      */   public void getFocusedRect(Rect paramRect) { Rect rect = doGetFocusedRect(); if (rect == null) {
/*      */       super.getFocusedRect(paramRect);
/*      */     } else {
/*      */       paramRect.set(rect);
/*      */     }  }
/*      */   public void setKeyboardDisplay(int paramInt) { if (paramInt == 1) {
/*      */       getActivity().getWindow().setSoftInputMode(32);
/*      */     } else if (paramInt == 0) {
/*      */       getActivity().getWindow().setSoftInputMode(16);
/*      */     }  }
/*      */   public void hideKeyboard() { InputMethodManager inputMethodManager = (InputMethodManager)getContext().getSystemService("input_method"); if (inputMethodManager != null)
/*      */       inputMethodManager.restartInput(this);  inputMethodManager.hideSoftInputFromWindow(getWindowToken(), 0); }
/*      */   public void resetKeyboard() { InputMethodManager inputMethodManager = (InputMethodManager)getContext().getSystemService("input_method"); if (inputMethodManager != null)
/*      */       inputMethodManager.restartInput(this);  }
/*      */   public void setTextInputVisible(boolean paramBoolean, int paramInt1, int paramInt2) { this.m_text_editor_visible = paramBoolean; if (!s_running)
/*      */       return;  if (paramBoolean) {
/*      */       this.m_text_editor_mode = paramInt1; this.m_ime_action = paramInt2; showKeyboard();
/*      */     } else {
/*      */       hideKeyboard(); this.m_text_editor_mode = 0; this.m_ime_action = 0;
/*      */     }  }
/*      */   public void setKeyboardReturnKey(int paramInt) { this.m_default_ime_action = paramInt; }
/*      */   public void setTextInputMode(int paramInt) { boolean bool = (s_running && this.m_text_editor_visible && paramInt != this.m_default_text_editor_mode) ? true : false; this.m_default_text_editor_mode = paramInt;
/*      */     if (bool)
/*      */       resetKeyboard();  }
/*      */   public int getInputType(boolean paramBoolean) { int j = this.m_text_editor_mode;
/*      */     if (j == 0)
/*      */       j = this.m_default_text_editor_mode; 
/*      */     if (paramBoolean && j == 4)
/*      */       j = 2; 
/*      */     if (paramBoolean && Build.VERSION.SDK_INT < 11 && (j == 2 || j == 3))
/*      */       j = 1; 
/*      */     switch (j) {
/*      */       default:
/*      */         i = 655361;
/*      */         if (paramBoolean)
/*      */           i |= 0x80; 
/*      */         return i;
/*      */       case 2:
/*      */         i = 4098;
/*      */         if (paramBoolean)
/*      */           i |= 0x10; 
/*      */         return i;
/*      */       case 3:
/*      */         i = 12290;
/*      */         if (paramBoolean)
/*      */           i |= 0x10; 
/*      */         return i;
/*      */       case 4:
/*      */         i = 3;
/*      */         return i;
/*      */       case 5:
/*      */         break;
/*      */     } 
/*      */     int i = 33;
/*      */     if (paramBoolean)
/*      */       i |= 0x80; 
/*      */     return i; }
/*  158 */   public Engine(Context paramContext) { super(paramContext);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1336 */     this.m_know_portrait_size = false;
/* 1337 */     this.m_know_landscape_size = false;
/* 1338 */     this.m_know_statusbar_size = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1497 */     this.m_keyboard_sizechange = false;
/* 1498 */     this.m_orientation_sizechange = false;
/*      */     
/* 1500 */     this.m_keyboard_visible = false;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3856 */     this.m_pending_activity_running = false;
/* 3857 */     this.m_pending_activity_result_code = 0;
/* 3858 */     this.m_pending_activity_data = null;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 3915 */     this.m_service_context = null;
/* 3916 */     this.m_running_services = null;
/* 3917 */     this.m_pending_services = null; s_engine_instance = this; OpenGLView.listConfigs(); setFocusable(true); setFocusableInTouchMode(true); this.m_handler = new Handler() { public void handleMessage(Message param1Message) { Engine.this.m_wake_scheduled = false; Engine.doProcess(true); } }
/*      */       ; this.m_default_text_editor_mode = 1; this.m_text_editor_mode = 0; this.m_text_editor_visible = false; this.m_default_ime_action = 1073741830; this.m_ime_action = 0; this.m_sensor_module = new SensorModule(this); this.m_dialog_module = new DialogModule(this); this.m_network_module = new NetworkModule(this); this.m_busy_indicator_module = new BusyIndicator(this); this.m_text_messaging_module = new TextMessaging(this); this.m_beep_vibrate_module = new Alert(this); this.m_contact_module = new Contact(this, (LiveCodeActivity)getContext()); this.m_calendar_module = new CalendarEvents(this, (LiveCodeActivity)getContext()); (LiveCodeActivity)getContext(); this.m_native_control_module = new NativeControlModule(this, (ViewGroup)LiveCodeActivity.s_main_layout); this.m_sound_module = new SoundModule(this); this.m_notification_module = new NotificationModule(this); this.m_nfc_module = new NFCModule(this); this.m_view_layout = null; PowerManager powerManager = (PowerManager)paramContext.getSystemService("power"); this.m_wake_lock = powerManager.newWakeLock(26, "revandroid.Engine"); this.m_shake_listener = new ShakeEventListener(paramContext) { public void onShake(int param1Int, long param1Long) { Engine.doShake(param1Int, param1Long); if (Engine.this.m_wake_on_event) Engine.doProcess(false);  } }
/*      */       ; this.m_orientation_listener = new ScreenOrientationEventListener(paramContext, 0) { public void onScreenOrientationChanged(int param1Int) { Engine.doOrientationChanged(param1Int); if (Engine.this.m_wake_on_event) Engine.doProcess(false);  } }
/*      */       ; this.m_shake_listener.setListening(true); this.m_opengl_view = null; this.m_disabling_opengl = false; this.m_enabling_opengl = false; this.m_bitmap_view = new BitmapView(getContext()); this.m_collator = Collator.getInstance(Locale.getDefault()); this.m_trust_manager = null; this.m_last_certificate_verification_error = null; System.setProperty("http.keepAlive", "false"); this.m_new_intent = false; this.m_photo_width = 0; this.m_photo_height = 0; this.m_jpeg_quality = 100; this.m_night_mode = (paramContext.getResources().getConfiguration()).uiMode & 0x30; this.m_lifecycle_listeners = new ArrayList<>(); } public void configureTextInput(int paramInt) { this.m_text_editor_mode = paramInt; if (!s_running) return;  if (paramInt == 0) { hideKeyboard(); } else { showKeyboard(); }  } protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect) { if (!paramBoolean) { hideKeyboard(); } else if (paramBoolean) { if (this.m_text_editor_visible) { showKeyboard(); } else { hideKeyboard(); }  }  super.onFocusChanged(paramBoolean, paramInt, paramRect); } public int conversionByteCount(byte[] paramArrayOfbyte, String paramString1, String paramString2) { Charset charset1 = Charset.forName(paramString1); Charset charset2 = Charset.forName(paramString2); if (charset1 == null || charset2 == null) return 0;  CharsetDecoder charsetDecoder = charset1.newDecoder(); CharsetEncoder charsetEncoder = charset2.newEncoder(); charsetDecoder.replaceWith("?"); try { CharBuffer charBuffer = charsetDecoder.decode(ByteBuffer.wrap(paramArrayOfbyte)); ByteBuffer byteBuffer = charsetEncoder.encode(charBuffer); return byteBuffer.limit(); } catch (CharacterCodingException characterCodingException) { return 0; }  } public byte[] convertCharset(byte[] paramArrayOfbyte, String paramString1, String paramString2) { Charset charset1 = Charset.forName(paramString1); Charset charset2 = Charset.forName(paramString2); if (charset1 == null || charset2 == null) return null;  CharsetDecoder charsetDecoder = charset1.newDecoder(); CharsetEncoder charsetEncoder = charset2.newEncoder(); charsetDecoder.onUnmappableCharacter(CodingErrorAction.REPLACE); charsetDecoder.replaceWith("?"); charsetEncoder.onUnmappableCharacter(CodingErrorAction.REPLACE); byte[] arrayOfByte = null; try { CharBuffer charBuffer = charsetDecoder.decode(ByteBuffer.wrap(paramArrayOfbyte)); ByteBuffer byteBuffer = charsetEncoder.encode(charBuffer); arrayOfByte = new byte[byteBuffer.limit()]; byteBuffer.get(arrayOfByte); } catch (Exception exception) { return null; }  return arrayOfByte; } public String getSpecialFolderPath(String paramString) { boolean bool = false; if (paramString.startsWith("external ")) { bool = true; paramString = paramString.substring("external ".length()); }  try { if (paramString.equalsIgnoreCase("documents")) { if (bool) return getContext().getExternalFilesDir(null).getAbsolutePath();  return getContext().getFilesDir().getAbsolutePath(); }  if (paramString.equalsIgnoreCase("temporary") || paramString.equalsIgnoreCase("cache")) { if (bool) return getContext().getExternalCacheDir().getAbsolutePath();  return getContext().getCacheDir().getAbsolutePath(); }  } catch (Exception exception) { return ""; }  return ""; } public int getAssetFileLength(String paramString) { byte b; try { AssetFileDescriptor assetFileDescriptor = getContext().getAssets().openFd(paramString); b = (int)assetFileDescriptor.getLength(); assetFileDescriptor.close(); } catch (Exception exception) { b = -1; }  return b; } public int getAssetFileStartOffset(String paramString) { byte b; try { AssetFileDescriptor assetFileDescriptor = getContext().getAssets().openFd(paramString); b = (int)assetFileDescriptor.getStartOffset(); assetFileDescriptor.close(); } catch (Exception exception) { b = -1; }  return b; } public int getAssetInfo(String paramString, int paramInt) { if (paramInt == 0) return getAssetFileStartOffset(paramString);  return getAssetFileLength(paramString); } public boolean isAssetFile(String paramString) { try { InputStream inputStream = getContext().getAssets().open(paramString); inputStream.close(); return true; } catch (IOException iOException) { return false; }  } public boolean isAssetFolder(String paramString) { if (isAssetFile(paramString)) return false;  try { if (paramString.endsWith("/")) paramString = paramString.substring(0, paramString.length() - 1);  String[] arrayOfString = getContext().getAssets().list(paramString); return (arrayOfString.length > 0); } catch (IOException iOException) { return false; }  } public String getAssetFolderEntryList(String paramString) { String[] arrayOfString; if (!isAssetFolder(paramString)) return null;  if (paramString.endsWith("/")) paramString = paramString.substring(0, paramString.length() - 1);  StringBuilder stringBuilder = new StringBuilder(); try { arrayOfString = getContext().getAssets().list(paramString); } catch (IOException iOException) { return null; }  for (String str1 : arrayOfString) { int i; String str2; if (paramString.length() == 0) { str2 = str1; } else { str2 = paramString + '/' + str1; }  boolean bool = !isAssetFile(str2) ? true : false; if (bool) { i = 0; } else { i = getAssetFileLength(str2); }  if (stringBuilder.length() > 0) stringBuilder.append('\n');  stringBuilder.append(str1); stringBuilder.append('\n'); stringBuilder.append(Integer.toString(i) + "," + bool); }  return stringBuilder.toString(); } Object getNativeLayerContainer() { if (this.m_view_layout == null) { (LiveCodeActivity)getContext(); FrameLayout frameLayout = LiveCodeActivity.s_main_layout; this.m_view_layout = new AbsoluteLayout(getContext()); frameLayout.addView((View)this.m_view_layout, (ViewGroup.LayoutParams)new FrameLayout.LayoutParams(-1, -1)); frameLayout.bringChildToFront((View)this.m_view_layout); }  return this.m_view_layout; } Object createNativeLayerContainer() { return new AbsoluteLayout(getContext()); } void addNativeViewToContainer(Object paramObject1, Object paramObject2, Object paramObject3) { int i; ViewGroup viewGroup = (ViewGroup)paramObject3; if (paramObject2 != null) { i = viewGroup.indexOfChild((View)paramObject2); } else { i = viewGroup.getChildCount(); }  viewGroup.addView((View)paramObject1, i, (ViewGroup.LayoutParams)new AbsoluteLayout.LayoutParams(0, 0, 0, 0)); } void removeNativeViewFromContainer(Object paramObject) { View view = (View)paramObject; ViewGroup viewGroup = (ViewGroup)view.getParent(); if (viewGroup != null) viewGroup.removeView(view);  } void setNativeViewRect(Object paramObject, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { AbsoluteLayout.LayoutParams layoutParams = new AbsoluteLayout.LayoutParams(paramInt3, paramInt4, paramInt1, paramInt2); View view = (View)paramObject; view.setLayoutParams((ViewGroup.LayoutParams)layoutParams); } void addNativeControl(Object paramObject) { this.m_native_control_module.addControl(paramObject); } void removeNativeControl(Object paramObject) { this.m_native_control_module.removeControl(paramObject); } Object createNativeControl(String paramString) { return this.m_native_control_module.createControl(paramString); } Object createBrowserControl() { return this.m_native_control_module.createControl("com.runrev.android.nativecontrol.BrowserControl"); } Object createScrollerControl() { return this.m_native_control_module.createControl("com.runrev.android.nativecontrol.ScrollerControl"); } Object createPlayerControl() { return this.m_native_control_module.createControl("com.runrev.android.nativecontrol.VideoControl"); } Object createInputControl() { return this.m_native_control_module.createControl("com.runrev.android.nativecontrol.InputControl"); } Object loadAdModule() { try { Class<?> clazz = Class.forName("com.runrev.android.AdModule"); Constructor<?> constructor = clazz.getConstructor(new Class[] { Engine.class, ViewGroup.class }); (new Object[2])[0] = this; (LiveCodeActivity)getContext(); return constructor.newInstance(new Object[] { null, LiveCodeActivity.s_main_layout }); } catch (Exception exception) { return null; }  } public void popupAnswerDialog(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5) { this.m_dialog_module.showAnswerDialog(paramString1, paramString2, paramString3, paramString4, paramString5); } public void onAnswerDialogDone(int paramInt) { doAnswerDialogDone(paramInt); } public void popupAskDialog(boolean paramBoolean1, String paramString1, String paramString2, String paramString3, boolean paramBoolean2) { this.m_dialog_module.showAskDialog(paramBoolean1, paramString1, paramString2, paramString3, paramBoolean2); } public void onAskDialogDone(String paramString) { doAskDialogDone(paramString); } public void showDatePicker(boolean paramBoolean1, boolean paramBoolean2, int paramInt1, int paramInt2, int paramInt3) { this.m_dialog_module.showDatePicker(paramBoolean1, paramBoolean2, paramInt1, paramInt2, paramInt3); } public void onDatePickerDone(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean) { doDatePickerDone(paramInt1, paramInt2, paramInt3, paramBoolean); if (this.m_wake_on_event) doProcess(false);  } public void showTimePicker(int paramInt1, int paramInt2) { this.m_dialog_module.showTimePicker(paramInt1, paramInt2); } public void onTimePickerDone(int paramInt1, int paramInt2, boolean paramBoolean) { doTimePickerDone(paramInt1, paramInt2, paramBoolean); if (this.m_wake_on_event) doProcess(false);  } public void showListPicker(List paramList, String paramString, boolean paramBoolean1, int paramInt, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4) { String[] arrayOfString = (String[])paramList.toArray((Object[])new String[paramList.size()]); this.m_dialog_module.showListPicker(arrayOfString, paramString, paramBoolean1, paramInt, paramBoolean2, paramBoolean3, paramBoolean4); } public void onListPickerDone(int paramInt, boolean paramBoolean) { doListPickerDone(paramInt, paramBoolean); if (this.m_wake_on_event) doProcess(false);  } public void onAskPermissionDone(boolean paramBoolean) { doAskPermissionDone(paramBoolean); } public Object getSnapshotBitmapAtSize(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6) { Bitmap bitmap = Bitmap.createBitmap(paramInt5, paramInt6, Bitmap.Config.ARGB_8888); Canvas canvas = new Canvas(bitmap); canvas.scale(paramInt5 / paramInt3, paramInt6 / paramInt4); canvas.translate(-paramInt1, -paramInt2); getActivity().getWindow().getDecorView().getRootView().draw(canvas); return bitmap; } public String getSystemVersion() { return Build.VERSION.RELEASE; } public String getMachine() { return Build.MODEL; } private String rectToString(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { return String.format("%d,%d,%d,%d", new Object[] { Integer.valueOf(paramInt1), Integer.valueOf(paramInt2), Integer.valueOf(paramInt3), Integer.valueOf(paramInt4) }); } private String rectToString(Rect paramRect) { return rectToString(paramRect.left, paramRect.top, paramRect.right, paramRect.bottom); } private WindowManager getWindowManager() { return (WindowManager)getContext().getSystemService("window"); } public Rect getViewport() { DisplayMetrics displayMetrics = new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(displayMetrics); return new Rect(0, 0, displayMetrics.widthPixels, displayMetrics.heightPixels); } public String getViewportAsString() { return rectToString(getViewport()); } private Rect getEffectiveWorkarea() { Rect rect = new Rect(); getWindowVisibleDisplayFrame(rect); return rect; } public String getEffectiveWorkareaAsString() { return rectToString(getEffectiveWorkarea()); } private Rect getWorkarea(boolean paramBoolean, int paramInt1, int paramInt2) { Rect rect1 = null; Rect rect2 = getViewport(); boolean bool = (rect2.height() > rect2.width()) ? true : false; int[] arrayOfInt = new int[2]; getLocationOnScreen(arrayOfInt); if (paramBoolean && !keyboardIsVisible()) { rect1 = new Rect(arrayOfInt[0], arrayOfInt[1], arrayOfInt[0] + paramInt1, arrayOfInt[1] + paramInt2); if (bool && !this.m_know_portrait_size) { this.m_portrait_rect = rect1; this.m_know_portrait_size = true; } else if (!bool && !this.m_know_landscape_size) { this.m_landscape_rect = rect1; this.m_know_landscape_size = true; }  if (!this.m_know_statusbar_size) { this.m_statusbar_size = rect2.height() - paramInt2; this.m_know_statusbar_size = true; }  } else if (bool && this.m_know_portrait_size) { rect1 = this.m_portrait_rect; } else if (!bool && this.m_know_landscape_size) { rect1 = this.m_landscape_rect; }  if (rect1 == null) { rect1 = new Rect(rect2); if (this.m_know_statusbar_size) rect1.bottom -= this.m_statusbar_size;  rect1.offsetTo(arrayOfInt[0], arrayOfInt[1]); }  return rect1; } public Rect getWorkarea() { return getWorkarea(false, 0, 0); } public String getWorkareaAsString() { return rectToString(getWorkarea()); } public void setStatusbarVisibility(boolean paramBoolean) { try { Method method = getClass().getMethod("setSystemUiVisibility", new Class[] { int.class }); method.invoke(this, new Object[] { new Integer(paramBoolean ? 0 : 1) }); } catch (Exception exception) { boolean bool = paramBoolean ? false : true; char c = 'Ѐ'; ((Activity)getContext()).getWindow().setFlags(bool, c); }  } public boolean getStatusbarVisibility() { return (0 == ((((Activity)getContext()).getWindow().getAttributes()).flags & 0x400)); } public void onBackPressed() { if (!this.m_native_control_module.handleBackPressed()) doBackPressed();  if (this.m_wake_on_event) doProcess(false);  } public void onMenuKey() { doMenuKey(); if (this.m_wake_on_event) doProcess(false);  } public void onSearchKey() { doSearchKey(); if (this.m_wake_on_event) doProcess(false);  } public boolean onTouchEvent(MotionEvent paramMotionEvent) { if (!hasFocus()) requestFocus();  int i = paramMotionEvent.getPointerCount(); int j = paramMotionEvent.getActionMasked(); if (j == 5 || j == 6) { int k = paramMotionEvent.getActionIndex(); doTouch(j, paramMotionEvent.getPointerId(k), (int)paramMotionEvent.getEventTime(), (int)paramMotionEvent.getX(k), (int)paramMotionEvent.getY(k)); } else { for (byte b = 0; b < i; b++) doTouch(j, paramMotionEvent.getPointerId(b), (int)paramMotionEvent.getEventTime(), (int)paramMotionEvent.getX(b), (int)paramMotionEvent.getY(b));  }  if (this.m_wake_on_event) doProcess(false);  return true; } boolean keyboardIsVisible() { int i = 0; int j = getResources().getIdentifier("status_bar_height", "dimen", "android"); if (j > 0) i = getResources().getDimensionPixelSize(j);  Rect rect = new Rect(); getActivity().getWindow().getDecorView().getWindowVisibleDisplayFrame(rect); (LiveCodeActivity)getContext(); int k = LiveCodeActivity.s_main_layout.getRootView().getHeight(); int m = k - rect.height() + i - getSoftbuttonsbarHeight(); return (m > 0); } private int getSoftbuttonsbarHeight() { if (Build.VERSION.SDK_INT < 17) return 0;  DisplayMetrics displayMetrics = new DisplayMetrics(); getWindowManager().getDefaultDisplay().getMetrics(displayMetrics); int i = displayMetrics.heightPixels; getWindowManager().getDefaultDisplay().getRealMetrics(displayMetrics); int j = displayMetrics.heightPixels; return (j > i) ? (j - i) : 0; } void updateKeyboardVisible() { boolean bool = keyboardIsVisible(); if (bool == this.m_keyboard_visible) return;  this.m_keyboard_visible = bool; if (bool) { doKeyboardShown(0); } else { doKeyboardHidden(); }  this.m_keyboard_sizechange = true; } void updateOrientation(int paramInt) { this.m_orientation_sizechange = true; } protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { Rect rect = null; if ((paramInt3 == 0 && paramInt4 == 0) || this.m_orientation_sizechange) rect = getWorkarea(true, paramInt1, paramInt2);  this.m_keyboard_sizechange = this.m_orientation_sizechange = false; if (rect == null) return;  this.m_bitmap_view.resizeBitmap(rect.width(), rect.height()); int[] arrayOfInt = new int[2]; getLocationOnScreen(arrayOfInt); doReconfigure(arrayOfInt[0], arrayOfInt[1], rect.width(), rect.height(), this.m_bitmap_view.getBitmap()); if (this.m_wake_on_event) doProcess(false);  } protected void onAttachedToWindow() { ((ViewGroup)getParent()).addView(this.m_bitmap_view, 0, (ViewGroup.LayoutParams)new FrameLayout.LayoutParams(-1, -1)); } public void invalidateBitmap(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { if (this.m_bitmap_view != null && this.m_bitmap_view.getVisibility() == 0) { this.m_bitmap_view.invalidate(paramInt1, paramInt2, paramInt3, paramInt4); } else if (this.m_opengl_view != null && this.m_opengl_view.getVisibility() == 0) { this.m_opengl_view.invalidate(paramInt1, paramInt2, paramInt3, paramInt4); }  } public boolean isSensorAvailable(int paramInt) { return this.m_sensor_module.isSensorAvailable(paramInt); } public boolean startTrackingLocation(boolean paramBoolean) { return this.m_sensor_module.startTrackingLocation(paramBoolean); } public boolean stopTrackingLocation() { return this.m_sensor_module.stopTrackingLocation(); } public boolean startTrackingHeading(boolean paramBoolean) { return this.m_sensor_module.startTrackingHeading(paramBoolean); } public boolean stopTrackingHeading() { return this.m_sensor_module.stopTrackingHeading(); } public boolean startTrackingAcceleration(boolean paramBoolean) { return this.m_sensor_module.startTrackingAcceleration(paramBoolean); } public boolean stopTrackingAcceleration() { return this.m_sensor_module.stopTrackingAcceleration(); } public boolean startTrackingRotationRate(boolean paramBoolean) { return this.m_sensor_module.startTrackingRotationRate(paramBoolean); } public boolean stopTrackingRotationRate() { return this.m_sensor_module.stopTrackingRotationRate(); } public void onAccelerationChanged(float paramFloat1, float paramFloat2, float paramFloat3, double paramDouble) { doAccelerationChanged(paramFloat1, paramFloat2, paramFloat3, paramDouble); if (this.m_wake_on_event) doProcess(false);  }
/* 3921 */   private int serviceListFind(ArrayList<ServiceListener> paramArrayList, ServiceListener paramServiceListener) { for (byte b = 0; b < paramArrayList.size(); b++) {
/*      */       
/* 3923 */       if (paramArrayList.get(b) == paramServiceListener)
/*      */       {
/* 3925 */         return b;
/*      */       }
/*      */     } 
/* 3928 */     return -1; } public void onLocationChanged(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, float paramFloat, double paramDouble5, double paramDouble6) { doLocationChanged(paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramFloat, paramDouble5, paramDouble6); if (this.m_wake_on_event) doProcess(false);  } public void onHeadingChanged(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) { doHeadingChanged(paramDouble1, paramDouble2, paramDouble3, paramDouble4, paramFloat1, paramFloat2, paramFloat3, paramFloat4); if (this.m_wake_on_event) doProcess(false);  } public void onRotationRateChanged(float paramFloat1, float paramFloat2, float paramFloat3, double paramDouble) { doRotationRateChanged(paramFloat1, paramFloat2, paramFloat3, paramDouble); if (this.m_wake_on_event) doProcess(false);  } public String getNetworkInterfaces() { return this.m_network_module.getNetworkInterfaces(); } public void setURLTimeout(int paramInt) { this.m_network_module.setURLTimeout(paramInt); } public void setURLSSLVerification(boolean paramBoolean) { this.m_network_module.setURLSSLVerification(paramBoolean); } public boolean loadURL(int paramInt, String paramString1, String paramString2) { return this.m_network_module.loadURL(paramInt, paramString1, paramString2); } public boolean postURL(int paramInt, String paramString1, String paramString2, byte[] paramArrayOfbyte) { return this.m_network_module.postURL(paramInt, paramString1, paramString2, paramArrayOfbyte); } public boolean putURL(int paramInt, String paramString1, String paramString2, byte[] paramArrayOfbyte) { return this.m_network_module.putURL(paramInt, paramString1, paramString2, paramArrayOfbyte); } public void onUrlDidStart(int paramInt) { doUrlDidStart(paramInt); if (this.m_wake_on_event) doProcess(false);  } public void onUrlDidConnect(int paramInt1, int paramInt2) { doUrlDidConnect(paramInt1, paramInt2); if (this.m_wake_on_event) doProcess(false);  } public void onUrlDidSendData(int paramInt1, int paramInt2) { doUrlDidSendData(paramInt1, paramInt2); if (this.m_wake_on_event) doProcess(false);  } public void onUrlDidReceiveData(int paramInt1, byte[] paramArrayOfbyte, int paramInt2) { doUrlDidReceiveData(paramInt1, paramArrayOfbyte, paramInt2); if (this.m_wake_on_event) doProcess(false);  } public void onUrlDidFinish(int paramInt) { doUrlDidFinish(paramInt); if (this.m_wake_on_event) doProcess(false);  } public void onUrlError(int paramInt, String paramString) { doUrlError(paramInt, paramString); if (this.m_wake_on_event) doProcess(false);  } public void launchUrl(String paramString) { Uri uri; String str = null; if (paramString.startsWith("file:") || paramString.startsWith("binfile:")) { try { str = URLConnection.guessContentTypeFromStream((new URL(paramString)).openStream()); } catch (IOException iOException) { str = null; }  if (str == null) str = URLConnection.guessContentTypeFromName(paramString);  String str1 = paramString.substring(paramString.indexOf(":") + 1); uri = FileProvider.getProvider(getContext()).addPath(str1, str1, str, false, 268435456); } else { uri = Uri.parse(paramString); }  Intent intent = new Intent("android.intent.action.VIEW"); if (str != null) { intent.setDataAndType(uri, str); } else { intent.setData(uri); }  intent.addFlags(1); ((LiveCodeActivity)getContext()).startActivityForResult(intent, 3); } public void onLaunchUrlResult(int paramInt, Intent paramIntent) {} public boolean playSound(String paramString, boolean paramBoolean1, boolean paramBoolean2) { return this.m_sound_module.playSound(paramString, paramBoolean1, paramBoolean2); } public int getPlayLoudness() { return this.m_sound_module.getPlayLoudness(); } public boolean setPlayLoudness(int paramInt) { return this.m_sound_module.setPlayLoudness(paramInt); } public boolean playSoundOnChannel(String paramString1, String paramString2, String paramString3, int paramInt, boolean paramBoolean, long paramLong) { return this.m_sound_module.playSoundOnChannel(paramString2, paramString1, paramInt, paramString3, paramBoolean, paramLong); } public boolean stopSoundOnChannel(String paramString) { return this.m_sound_module.stopPlayingOnChannel(paramString); } public boolean pauseSoundOnChannel(String paramString) { return this.m_sound_module.pausePlayingOnChannel(paramString); } public boolean resumeSoundOnChannel(String paramString) { return this.m_sound_module.resumePlayingOnChannel(paramString); } public boolean deleteSoundChannel(String paramString) { return this.m_sound_module.deleteSoundChannel(paramString); } public boolean setSoundChannelVoulme(String paramString, int paramInt) { return this.m_sound_module.setChannelVolume(paramString, paramInt); } public int getSoundChannelVolume(String paramString) { return this.m_sound_module.getChannelVolume(paramString); } public int getSoundChannelStatus(String paramString) { return this.m_sound_module.getChannelStatus(paramString); } public String getSoundOnChannel(String paramString) { return this.m_sound_module.getSoundOnChannel(paramString); } public String getNextSoundOnChannel(String paramString) { return this.m_sound_module.getNextSoundOnChannel(paramString); } public String getSoundChannels() { return this.m_sound_module.getSoundChannels(); } public boolean playVideo(String paramString, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, boolean paramBoolean4) { if (paramString == null || paramString.length() == 0) { stopVideo(); return true; }  boolean bool = true; this.m_video_control = (VideoControl)this.m_native_control_module.createControl("com.runrev.android.nativecontrol.VideoControl"); this.m_native_control_module.addControl(this.m_video_control); Rect rect = getWorkarea(); this.m_video_control.setRect(0, 0, rect.right - rect.left, rect.bottom - rect.top); if (paramBoolean2) { bool = this.m_video_control.setUrl(paramString); } else { bool = this.m_video_control.setFile(paramString, paramBoolean1); }  if (bool) { this.m_video_control.setOnCompletionListener(new MediaPlayer.OnCompletionListener() { public void onCompletion(MediaPlayer param1MediaPlayer) { Log.i("revandroid.Engine", "videocompletion"); Engine.this.stopVideo(); } }
/*      */         ); this.m_video_control.setOnErrorListener(new MediaPlayer.OnErrorListener() { public boolean onError(MediaPlayer param1MediaPlayer, int param1Int1, int param1Int2) { Engine.this.m_video_is_playing = false; return false; } }
/*      */         ); this.m_video_control.setOnPreparedListener(new MediaPlayer.OnPreparedListener() { public void onPrepared(MediaPlayer param1MediaPlayer) {} }
/*      */         ); this.m_video_control.setOnVideoSizeChangedListener(new MediaPlayer.OnVideoSizeChangedListener() { public void onVideoSizeChanged(MediaPlayer param1MediaPlayer, int param1Int1, int param1Int2) {} }
/*      */         ); this.m_video_control.setOnMovieTouchedListener(new VideoControl.OnMovieTouchedListener() { public void onMovieTouched() { Engine.doMovieTouched(); if (Engine.this.m_wake_on_event) Engine.doProcess(false);  } }
/* 3933 */         ); this.m_video_control.setShowController(paramBoolean4); this.m_video_control.setVisible(true); this.m_video_control.start(); } else { stopVideo(); return false; }  return true; } public void stopVideo() { this.m_video_is_playing = false; if (this.m_video_control != null) { this.m_video_control.stop(); this.m_native_control_module.removeControl(this.m_video_control); this.m_video_control = null; }  doMovieStopped(); if (this.m_wake_on_event) doProcess(false);  } public int getCameraCount() { return CameraCompat.getNumberOfCameras(); } public String getCameraDirections() { int i = CameraCompat.getNumberOfCameras(); char[] arrayOfChar = new char[i]; CameraCompat.CameraInfo cameraInfo = new CameraCompat.CameraInfo(); for (byte b = 0; b < i; b++) { CameraCompat.getCameraInfo(b, cameraInfo); if (cameraInfo.facing == 0) { arrayOfChar[b] = 'b'; } else if (cameraInfo.facing == 1) { arrayOfChar[b] = 'f'; } else { arrayOfChar[b] = '?'; }  }  return new String(arrayOfChar); } public void startService(ServiceListener paramServiceListener) { if (this.m_running_services == null)
/*      */     {
/* 3935 */       this.m_pending_services = new ArrayList<>();
/*      */     }
/*      */     
/* 3938 */     this.m_pending_services.add(paramServiceListener);
/*      */     
/* 3940 */     Intent intent = new Intent(getContext(), getServiceClass());
/* 3941 */     getContext().startService(intent); } public boolean askPermission(String paramString) { if (Build.VERSION.SDK_INT >= 23 && getContext().checkSelfPermission(paramString) != 0) { LiveCodeActivity liveCodeActivity = (LiveCodeActivity)getContext(); liveCodeActivity.requestPermissions(new String[] { paramString }, 1); } else { onAskPermissionDone(true); }  return true; } public boolean checkHasPermissionGranted(String paramString) { if (Build.VERSION.SDK_INT >= 23) return (getContext().checkSelfPermission(paramString) == 0);  return true; } public boolean checkPermissionExists(String paramString) { if (Build.VERSION.SDK_INT >= 23) { List<PermissionGroupInfo> list = getAllPermissionGroups(); if (list == null) return false;  ArrayList<String> arrayList = new ArrayList(); for (PermissionGroupInfo permissionGroupInfo : list) { String str = permissionGroupInfo.name; if (str != null) arrayList.add(str);  }  for (String str : arrayList) { ArrayList<String> arrayList1 = getPermissionsForGroup(str); if (arrayList1.contains(paramString)) return true;  }  return false; }  return true; } private List<PermissionGroupInfo> getAllPermissionGroups() { PackageManager packageManager = getContext().getPackageManager(); if (packageManager == null) return null;  return packageManager.getAllPermissionGroups(0); } private ArrayList<String> getPermissionsForGroup(String paramString) { PackageManager packageManager = getContext().getPackageManager(); ArrayList<String> arrayList = new ArrayList(); try { List list = packageManager.queryPermissionsByGroup(paramString, 128); if (list != null) for (PermissionInfo permissionInfo : list) { String str = permissionInfo.name; arrayList.add(str); }   } catch (android.content.pm.PackageManager.NameNotFoundException nameNotFoundException) { Log.d("revandroid.Engine", "permissions not found for group = " + paramString); }  Collections.sort(arrayList); return arrayList; } public void showPhotoPicker(String paramString, int paramInt1, int paramInt2, int paramInt3) { this.m_photo_width = paramInt1; this.m_photo_height = paramInt2; this.m_jpeg_quality = paramInt3; if (paramString.contains("camera")) { showCamera(paramString); } else if (paramString.equals("album")) { showLibrary(); } else if (paramString.equals("library")) { showLibrary(); } else { doPhotoPickerError("source not available"); }  } public void onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfint) { onAskPermissionDone((paramArrayOfint[0] == 0)); } public void showCamera(String paramString) { boolean bool = false; LiveCodeActivity liveCodeActivity = (LiveCodeActivity)getContext(); try { this.m_temp_image_file = File.createTempFile("img", ".jpg", liveCodeActivity.getExternalCacheDir()); this.m_temp_image_file.setWritable(true, false); bool = true; } catch (IOException iOException) { this.m_temp_image_file = null; bool = false; }  if (!bool) try { this.m_temp_image_file = File.createTempFile("img", ".jpg", liveCodeActivity.getCacheDir()); this.m_temp_image_file.setWritable(true, false); bool = true; } catch (IOException iOException) { this.m_temp_image_file = null; bool = false; }   if (!bool) { doPhotoPickerError("error: could not create temporary image file"); return; }  String str = this.m_temp_image_file.getPath(); Uri uri = FileProvider.getProvider(getContext()).addPath(str, str, "image/jpeg", true, 805306368); Intent intent = new Intent("android.media.action.IMAGE_CAPTURE"); if (paramString.equals("front camera")) { intent.putExtra("android.intent.extras.CAMERA_FACING", 1); intent.putExtra("android.intent.extras.LENS_FACING_FRONT", 1); intent.putExtra("android.intent.extra.USE_FRONT_CAMERA", true); } else if (paramString.equals("rear camera")) { intent.putExtra("android.intent.extras.CAMERA_FACING", 0); intent.putExtra("android.intent.extras.LENS_FACING_FRONT", 0); intent.putExtra("android.intent.extra.USE_FRONT_CAMERA", false); }  intent.putExtra("output", (Parcelable)uri); intent.setFlags(2); liveCodeActivity.startActivityForResult(intent, 1); } public void showLibrary() { Intent intent = new Intent("android.intent.action.GET_CONTENT"); intent.setType("image/*"); ((LiveCodeActivity)getContext()).startActivityForResult(intent, 1); } private void onImageResult(int paramInt, Intent paramIntent) { if (paramInt == 0) { doPhotoPickerCanceled(); } else if (paramInt == -1) { try { Uri uri = null; if (this.m_temp_image_file != null) { uri = Uri.fromFile(this.m_temp_image_file); } else { uri = paramIntent.getData(); }  InputStream inputStream = ((LiveCodeActivity)getContext()).getContentResolver().openInputStream(uri); ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); if (this.m_photo_height > 0 && this.m_photo_width > 0) { ExifInterface exifInterface; int j, k; Bitmap bitmap1 = BitmapFactory.decodeStream(inputStream); float f1 = bitmap1.getWidth(); float f2 = bitmap1.getHeight(); if (Build.VERSION.SDK_INT >= 24) { inputStream.close(); inputStream = ((LiveCodeActivity)getContext()).getContentResolver().openInputStream(uri); exifInterface = new ExifInterface(inputStream); } else { exifInterface = new ExifInterface(uri.getPath()); }  int i = exifInterface.getAttributeInt("Orientation", 1); switch (i) { case 5: case 6: case 7: case 8: k = this.m_photo_width; j = this.m_photo_height; break;default: j = this.m_photo_width; k = this.m_photo_height; break; }  float f3 = Math.min(j / f1, k / f2); Matrix matrix = new Matrix(); matrix.setScale(f3, f3, 0.0F, 0.0F); switch (i) { case 2: matrix.postScale(-1.0F, 1.0F); break;case 3: matrix.postRotate(180.0F); break;case 4: matrix.postRotate(180.0F); matrix.postScale(-1.0F, 1.0F); break;case 5: matrix.postRotate(90.0F); matrix.postScale(-1.0F, 1.0F); break;case 6: matrix.postRotate(90.0F); break;case 7: matrix.postRotate(-90.0F); matrix.postScale(-1.0F, 1.0F); break;case 8: matrix.postRotate(-90.0F); break; }  Bitmap bitmap2 = Bitmap.createBitmap(bitmap1, 0, 0, (int)f1, (int)f2, matrix, true); bitmap2.compress(Bitmap.CompressFormat.JPEG, this.m_jpeg_quality, byteArrayOutputStream); } else { byte[] arrayOfByte = new byte[4096]; int i; while (-1 != (i = inputStream.read(arrayOfByte))) byteArrayOutputStream.write(arrayOfByte, 0, i);  }  doPhotoPickerDone(byteArrayOutputStream.toByteArray(), byteArrayOutputStream.size()); inputStream.close(); byteArrayOutputStream.close(); } catch (Exception exception) { doPhotoPickerError("error: could not get image data"); }  if (this.m_temp_image_file != null) { FileProvider.getProvider(getContext()).removePath(this.m_temp_image_file.getPath()); this.m_temp_image_file = null; }  }  if (this.m_wake_on_event) doProcess(false);  } public boolean canSendMail() { Intent intent = new Intent("android.intent.action.SEND_MULTIPLE"); intent.putExtra("android.intent.extra.EMAIL", "user@email.com"); intent.putExtra("android.intent.extra.SUBJECT", "subject"); intent.putExtra("android.intent.extra.TEXT", "message"); intent.setType("text/plain"); return (intent.resolveActivity(getContext().getPackageManager()) != null); } public void sendEmail(String paramString1, String paramString2, String paramString3, String paramString4) { prepareEmail(paramString1, paramString2, (String)null, paramString3, paramString4, false); sendEmail(); } public void prepareEmail(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5, boolean paramBoolean) { this.m_email = new Email(paramString1, paramString2, paramString3, paramString4, paramString5, paramBoolean); } public void addAttachment(String paramString1, String paramString2, String paramString3) { this.m_email.addAttachment((Context)getActivity(), paramString1, paramString2, paramString3); } public void addAttachment(byte[] paramArrayOfbyte, String paramString1, String paramString2) { this.m_email.addAttachment((Context)getActivity(), paramArrayOfbyte, paramString1, paramString2); } public void sendEmail() { ((LiveCodeActivity)getContext()).startActivityForResult(this.m_email.createIntent(), 2); } private void onEmailResult(int paramInt, Intent paramIntent) { this.m_email.cleanupAttachments(getContext()); if (paramInt == 0) { doMailCanceled(); } else if (paramInt == -1) { doMailDone(); } else { doMailCanceled(); }  if (this.m_wake_on_event) doProcess(false);  } public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent) { switch (paramInt1) { case 1: onImageResult(paramInt2, paramIntent); break;case 2: onEmailResult(paramInt2, paramIntent); break;case 3: onLaunchUrlResult(paramInt2, paramIntent); break;case 4: onTextResult(paramInt2, paramIntent); break;case 5: onMediaResult(paramInt2, paramIntent); break;case 6: onPickContactResult(paramInt2, paramIntent); break;case 7: onCreateContactResult(paramInt2, paramIntent); break;case 8: onUpdateContactResult(paramInt2, paramIntent); break;case 9: onShowContactResult(paramInt2, paramIntent); break;case 11: onCreateCalendarEventResult(paramInt2, paramIntent); break;case 12: onUpdateCalendarEventResult(paramInt2, paramIntent); break;case 13: onShowCalendarEventResult(paramInt2, paramIntent); break;case 14: onRunActivityResult(paramInt2, paramIntent); break;case 100: case 101: case 10001: mBillingProvider.onActivityResult(paramInt1, paramInt2, paramIntent); break; }  } private boolean openGLViewEnabled() { return (this.m_opengl_view != null && this.m_opengl_view.getParent() != null); } private void ensureBitmapViewVisibility() { if (openGLViewEnabled()) { this.m_bitmap_view.setVisibility(4); } else { this.m_bitmap_view.setVisibility(0); }  } public void enableOpenGLView() { Log.i("revandroid", "enableOpenGLView"); if (this.m_disabling_opengl) this.m_disabling_opengl = false;  if (!this.m_enabling_opengl) { this.m_enabling_opengl = true; post(new Runnable() { public void run() { Log.i("revandroid", "enableOpenGLView callback"); if (!Engine.this.m_disabling_opengl && Engine.this.m_enabling_opengl) if (!Engine.this.openGLViewEnabled()) { Log.i("revandroid", "enableOpenGLView adding"); if (Engine.this.m_opengl_view == null) Engine.this.m_opengl_view = new OpenGLView(Engine.this.getContext());  ((ViewGroup)Engine.this.getParent()).addView((View)Engine.this.m_opengl_view, 0, (ViewGroup.LayoutParams)new FrameLayout.LayoutParams(-1, -1)); } else { Engine.this.m_opengl_view; OpenGLView.doSurfaceChanged(Engine.this.m_opengl_view); }   Engine.this.m_enabling_opengl = false; Engine.this.ensureBitmapViewVisibility(); } }
/*      */         ); }  } public void disableOpenGLView() { Log.i("revandroid", "disableOpenGLView"); if (this.m_enabling_opengl) this.m_enabling_opengl = false;  if (!this.m_disabling_opengl) { this.m_disabling_opengl = true; this.m_bitmap_view.setVisibility(0); post(new Runnable() { public void run() { Log.i("revandroid", "disableOpenGLView callback"); if (!Engine.this.m_enabling_opengl && Engine.this.m_disabling_opengl) if (Engine.this.openGLViewEnabled()) { Log.i("revandroid", "disableOpenGLView removing"); ((ViewGroup)Engine.this.m_opengl_view.getParent()).removeView((View)Engine.this.m_opengl_view); }   Engine.this.m_disabling_opengl = false; Engine.this.ensureBitmapViewVisibility(); } }
/*      */         ); }  } public void hideBitmapViewInTime() { post(new Runnable() { public void run() { Engine.this.ensureBitmapViewVisibility(); } }
/*      */       ); } public void showBitmapView() { this.m_bitmap_view.setVisibility(0); } private void initBilling() { mBillingModule = new BillingModule(); if (mBillingModule == null) return;  mBillingProvider = mBillingModule.getBillingProvider(); if (mBillingProvider == null) return;  mBillingProvider.setActivity(getActivity()); this.mPurchaseObserver = new EnginePurchaseObserver((Activity)getContext()); mBillingProvider.setPurchaseObserver(this.mPurchaseObserver); mBillingProvider.initBilling(); } public boolean storeCanMakePurchase() { return mBillingProvider.canMakePurchase(); } public void storeSetUpdates(boolean paramBoolean) { if (this.mPurchaseObserver == null) return;  if (paramBoolean) { mBillingProvider.enableUpdates(); } else { mBillingProvider.disableUpdates(); }  } public boolean storeRestorePurchases() { if (this.mPurchaseObserver == null) return false;  return mBillingProvider.restorePurchases(); } public boolean purchaseSendRequest(int paramInt, String paramString1, String paramString2) { if (this.mPurchaseObserver == null) return false;  Log.i("revandroid.Engine", "purchaseSendRequest(" + paramInt + ", " + paramString1 + ")"); return mBillingProvider.sendRequest(paramInt, paramString1, paramString2); } public boolean storeConsumePurchase(String paramString) { if (this.mPurchaseObserver == null) return false;  return mBillingProvider.consumePurchase(paramString); } public boolean storeRequestProductDetails(String paramString) { return mBillingProvider.requestProductDetails(paramString); } public String storeReceiveProductDetails(String paramString) { return mBillingProvider.receiveProductDetails(paramString); } public boolean storeMakePurchase(String paramString1, String paramString2, String paramString3) { return mBillingProvider.makePurchase(paramString1, paramString2, paramString3); } public boolean storeProductSetType(String paramString1, String paramString2) { Log.d("revandroid.Engine", "Setting type for productId" + paramString1 + ", type is : " + paramString2); return mBillingProvider.productSetType(paramString1, paramString2); } public boolean storeSetPurchaseProperty(String paramString1, String paramString2, String paramString3) { return mBillingProvider.setPurchaseProperty(paramString1, paramString2, paramString3); } public String storeGetPurchaseProperty(String paramString1, String paramString2) { return mBillingProvider.getPurchaseProperty(paramString1, paramString2); } public boolean purchaseConfirmDelivery(int paramInt, String paramString) { if (this.mPurchaseObserver == null) return false;  return mBillingProvider.confirmDelivery(paramInt); } public String storeGetPurchaseList() { return mBillingProvider.getPurchaseList(); } public static interface LifecycleListener {
/*      */     void OnResume(); void OnPause(); } private class EnginePurchaseObserver extends PurchaseObserver {
/* 3946 */     public EnginePurchaseObserver(Activity param1Activity) { super(param1Activity); } public void onPurchaseStateChanged(String param1String, int param1Int) { final int tPurchaseState = param1Int; final String tProductId = param1String; final String tOrderId = Engine.this.storeGetPurchaseProperty(param1String, "orderId"); String str3 = Engine.this.storeGetPurchaseProperty(param1String, "purchaseTime"); long l1 = 0L; try { l1 = Long.parseLong(str3, 10); } catch (NumberFormatException numberFormatException) {} final long tPurchaseTime = l1; final String tDeveloperPayload = Engine.this.storeGetPurchaseProperty(param1String, "developerPayload"); final String tSignature = Engine.this.storeGetPurchaseProperty(param1String, "signature"); Engine.this.post(new Runnable() { public void run() { Engine.doPurchaseStateChanged(true, tPurchaseState, "", tProductId, tOrderId, tPurchaseTime, tDeveloperPayload, "", tSignature); if (Engine.this.m_wake_on_event) Engine.doProcess(false);  } }); } public void onProductDetailsReceived(String param1String) { final String tProductId = param1String; Engine.this.post(new Runnable() { public void run() { Engine.doProductDetailsResponse(tProductId); if (Engine.this.m_wake_on_event) Engine.doProcess(false);  } }); } public void onProductDetailsError(String param1String1, String param1String2) { final String tProductId = param1String1; final String tError = param1String2; Engine.this.post(new Runnable() { public void run() { Engine.doProductDetailsError(tProductId, tError); if (Engine.this.m_wake_on_event) Engine.doProcess(false);  } }); } } public void showBusyIndicator(String paramString) { this.m_busy_indicator_module.showBusyIndicator(paramString); } public void hideBusyIndicator() { this.m_busy_indicator_module.hideBusyIndicator(); } public boolean canSendTextMessage() { Intent intent = this.m_text_messaging_module.canSendTextMessage(); return (intent.resolveActivity(getContext().getPackageManager()) != null); } public void composeTextMessage(String paramString1, String paramString2) { Intent intent = this.m_text_messaging_module.composeTextMessage(paramString1, paramString2); ((LiveCodeActivity)getContext()).startActivityForResult(intent, 4); } private void onTextResult(int paramInt, Intent paramIntent) { if (paramInt == 0) { doTextCanceled(); } else if (paramInt == -1) { doTextDone(); } else { doTextCanceled(); }  if (this.m_wake_on_event) doProcess(false);  } public void doBeep(int paramInt) { try { this.m_beep_vibrate_module.doBeep(paramInt); } catch (IOException iOException) {} } public void doVibrate(int paramInt) { this.m_beep_vibrate_module.doVibrate(paramInt); } public int pickContact() { boolean bool = false; this.m_contact_module.pickContact(); return bool; } public int showContact(int paramInt) { boolean bool = false; this.m_contact_module.showContact(paramInt); return bool; } public int createContact() { boolean bool = false; this.m_contact_module.createContact(); return bool; } public void updateContact(Map paramMap, String paramString1, String paramString2, String paramString3) { Log.i("revandroid.Engine", " ENG updateContact"); this.m_contact_module.updateContact(paramMap, paramString1, paramString2, paramString3); } public Map getContactData(int paramInt) { return this.m_contact_module.getContactData(paramInt); } public void removeContact(int paramInt) { this.m_contact_module.removeContact(paramInt); } public int addContact(Map paramMap) { Log.i("revandroid.Engine", "ENG addContact"); return this.m_contact_module.addContact(paramMap); } public void findContact(String paramString) { Log.i("revandroid", "ENG findContact - name: " + paramString); this.m_contact_module.findContact(paramString); } private void onPickContactResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onPickContact Called"); if (paramInt == -1) { Log.i("revandroid", "pickContact Okay"); Uri uri = paramIntent.getData(); int i = 0; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); i = cursor.getInt(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "pickContact Okay1 : " + i); }  doPickContactDone(i); } else { Log.i("revandroid", "pickContact Canceled"); doPickContactCanceled(0); }  if (this.m_wake_on_event) doProcess(false);  } private void onUpdateContactResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onUpdateContact Called"); if (paramInt == -1) { Log.i("revandroid", "updateContact Okay"); Uri uri = paramIntent.getData(); int i = 0; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); i = cursor.getInt(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "updateContact Okay1 : " + i); }  doUpdateContactDone(i); } else { Log.i("revandroid", "updateContact Canceled"); doUpdateContactCanceled(0); }  if (this.m_wake_on_event) doProcess(false);  } private void onCreateContactResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onCreateContact Called"); if (paramInt == -1) { Log.i("revandroid", "createContact Okay"); Uri uri = paramIntent.getData(); int i = 0; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); i = cursor.getInt(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "createContact Okay1 : " + i); }  doCreateContactDone(i); } else { Log.i("revandroid", "createContact Canceled"); doCreateContactCanceled(0); }  if (this.m_wake_on_event) doProcess(false);  } private void onShowContactResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onShowContact Called"); if (paramInt == -1) { Log.i("revandroid", "showContact Okay"); Uri uri = paramIntent.getData(); int i = 0; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); i = cursor.getInt(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "showContact Okay1 : " + i); }  doShowContactDone(i); } else { Log.i("revandroid", "showContact Canceled"); doShowContactCanceled(0); }  if (this.m_wake_on_event) doProcess(false);  } public void createCalendarEvent() { Log.i("revandroid", "createCalendarEvent Called"); this.m_calendar_module.createCalendarEvent(); } public void updateCalendarEvent(String paramString) { Log.i("revandroid", "updateCalendarEvent Called"); this.m_calendar_module.updateCalendarEvent(paramString); } private void onCreateCalendarEventResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onCreateCalendarEvent Called with resultCode: " + paramInt); if (paramInt == -1) { Log.i("revandroid", "createCalendarEvent Okay"); Uri uri = paramIntent.getData(); String str = ""; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); str = cursor.getString(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "createCalendarEvent Okay1 : " + str); }  doCreateCalendarEventDone(str); } else { Log.i("revandroid", "createCalendarEvent Canceled"); doCreateCalendarEventCanceled(""); }  if (this.m_wake_on_event) doProcess(false);  } private void onUpdateCalendarEventResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onUpdateCalendaaEvent Called"); if (paramInt == -1) { Log.i("revandroid", "updateCalendarEvent Okay"); Uri uri = paramIntent.getData(); String str = ""; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); str = cursor.getString(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "updateCalendarEvent Okay1 : " + str); }  doUpdateCalendarEventDone(str); } else { Log.i("revandroid", "updateCalendarEvent Canceled"); doUpdateCalendarEventCanceled(""); }  if (this.m_wake_on_event) doProcess(false);  } private void onShowCalendarEventResult(int paramInt, Intent paramIntent) { Log.i("revandroid", "onShowCalendarEvent Called"); if (paramInt == -1) { Log.i("revandroid", "showCalendarEvent Okay"); Uri uri = paramIntent.getData(); String str = ""; if (uri != null) { Cursor cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); if (cursor != null) { cursor.moveToFirst(); str = cursor.getString(cursor.getColumnIndex("_id")); }  Log.i("revandroid", "showCalendarEvent Okay1 : " + str); }  doShowCalendarEventDone(str); } else { Log.i("revandroid", "showCalendarEvent Canceled"); doShowCalendarEventCanceled(""); }  if (this.m_wake_on_event) doProcess(false);  } public long createLocalNotification(String paramString1, String paramString2, String paramString3, int paramInt1, boolean paramBoolean, int paramInt2) { return this.m_notification_module.createLocalNotification(paramString1, paramString2, paramString3, paramInt1 * 1000L, paramBoolean, paramInt2); } public String getRegisteredNotifications() { return this.m_notification_module.getRegisteredNotifications(); } public boolean getNotificationDetails(long paramLong) { return this.m_notification_module.getNotificationDetails(paramLong); } public boolean cancelLocalNotification(long paramLong) { return this.m_notification_module.cancelLocalNotification(paramLong); } public boolean cancelAllLocalNotifications() { return this.m_notification_module.cancelAllLocalNotifications(); } public void dispatchNotifications() { this.m_notification_module.dispatchNotifications(); } public boolean registerForRemoteNotifications() { String str = doGetCustomPropertyValue("cREVStandaloneSettings", "android,pushSenderID"); if (str == null || str.length() == 0) return false;  return this.m_notification_module.registerForRemoteNotifications(str); } public String getRemoteNotificationId() { return NotificationModule.getRemoteNotificationId(); } public void stopService(ServiceListener paramServiceListener) { if (serviceListFind(this.m_pending_services, paramServiceListener) != -1) {
/*      */       
/* 3948 */       this.m_pending_services.remove(serviceListFind(this.m_pending_services, paramServiceListener));
/*      */       
/*      */       return;
/*      */     } 
/* 3952 */     if (serviceListFind(this.m_running_services, paramServiceListener) != -1) {
/*      */       
/* 3954 */       paramServiceListener.onFinish(this.m_service_context);
/* 3955 */       this.m_running_services.remove(serviceListFind(this.m_running_services, paramServiceListener));
/*      */     } 
/*      */     
/* 3958 */     if (this.m_pending_services.isEmpty() && this.m_running_services
/* 3959 */       .isEmpty())
/*      */     
/* 3961 */     { Intent intent = new Intent(getContext(), getServiceClass());
/* 3962 */       getContext().stopService(intent); }  } public boolean isNFCAvailable() { return this.m_nfc_module.isAvailable(); } public boolean isNFCEnabled() { return this.m_nfc_module.isEnabled(); } public void enableNFCDispatch() { this.m_nfc_module.setDispatchEnabled(true); } public void disableNFCDispatch() { this.m_nfc_module.setDispatchEnabled(false); } public String getLaunchUri(Intent paramIntent) { if (paramIntent != null && "android.intent.action.VIEW".equals(paramIntent.getAction())) { Log.i("revandroid.Engine", paramIntent.toString()); Uri uri = paramIntent.getData(); if (uri == null) return null;  return uri.toString(); }  return null; } public String getLaunchUri() { Intent intent = ((Activity)getContext()).getIntent(); return getLaunchUri(intent); } private static boolean isValueRefCompatible(Class<String> paramClass) { if (String.class == paramClass) return true;  if (Integer.class == paramClass) return true;  if (Double.class == paramClass) return true;  if (Boolean.class == paramClass) return true;  if (byte[].class == paramClass) return true;  if (paramClass.isArray() && isValueRefCompatible(paramClass.getComponentType())) return true;  return false; } private static boolean isValueRefConvertable(Class<Bundle> paramClass) { if (Bundle.class == paramClass) return true;  if (paramClass.isArray() && isValueRefConvertable(paramClass.getComponentType())) return true;  return false; } private static Object makeValueRefCompatible(Object paramObject) { if (isValueRefCompatible(paramObject.getClass())) return paramObject;  if (paramObject instanceof Bundle) return bundleToMap((Bundle)paramObject);  if (paramObject.getClass().isArray() && isValueRefConvertable(paramObject.getClass())) { Object[] arrayOfObject1 = (Object[])paramObject; Object[] arrayOfObject2 = new Object[arrayOfObject1.length]; for (byte b = 0; b < arrayOfObject1.length; b++) arrayOfObject2[b] = makeValueRefCompatible(arrayOfObject1[b]);  return arrayOfObject2; }  return paramObject.toString(); } private static Map<String, Object> bundleToMap(Bundle paramBundle) { HashMap<Object, Object> hashMap = new HashMap<>(); for (String str : paramBundle.keySet()) { Object object = paramBundle.get(str); if (object != null) { Object object1 = makeValueRefCompatible(object); if (object1 != null) { hashMap.put(str, object1); continue; }  Log.i("revandroid.Engine", "conversion failed for bundle key " + str); }  }  return (Map)hashMap; } public Map<String, Object> getLaunchData() { Intent intent = ((Activity)getContext()).getIntent(); HashMap<Object, Object> hashMap = new HashMap<>(); if (intent != null) { String str = intent.getAction(); if (str != null) hashMap.put("action", str);  str = intent.getDataString(); if (str != null) hashMap.put("data", str);  str = intent.getType(); if (str != null) hashMap.put("type", str);  Set set = intent.getCategories(); if (set != null && !set.isEmpty()) { StringBuilder stringBuilder = new StringBuilder(); boolean bool = true; for (String str1 : set) { if (!bool) stringBuilder.append(',');  stringBuilder.append(str1); bool = false; }  hashMap.put("categories", stringBuilder.toString()); }  Bundle bundle = intent.getExtras(); if (bundle != null && !bundle.isEmpty()) hashMap.put("extras", bundleToMap(bundle));  }  return (Map)hashMap; } public void onAppLaunched() { String str = getLaunchUri(); if (str != null) doLaunchFromUrl(str);  initBilling(); dispatchNotifications(); registerForRemoteNotifications(); } public void onPause() { for (int i = this.m_lifecycle_listeners.size() - 1; i >= 0; i--) ((LifecycleListener)this.m_lifecycle_listeners.get(i)).OnPause();  if (this.m_text_editor_visible) hideKeyboard();  s_running = false; this.m_shake_listener.onPause(); this.m_orientation_listener.disable(); if (this.m_sensor_module != null) this.m_sensor_module.onPause();  if (this.m_sound_module != null) this.m_sound_module.onPause();  if (this.m_native_control_module != null) this.m_native_control_module.onPause();  if (this.m_nfc_module != null) this.m_nfc_module.onPause();  if (this.m_video_is_playing) this.m_video_control.suspend();  doPause(); } public void onResume() { this.m_shake_listener.onResume(); this.m_orientation_listener.enable(); updateOrientation(getDeviceRotation()); if (this.m_sensor_module != null) this.m_sensor_module.onResume();  if (this.m_sound_module != null) this.m_sound_module.onResume();  if (this.m_native_control_module != null) this.m_native_control_module.onResume();  if (this.m_nfc_module != null) this.m_nfc_module.onResume();  if (this.m_video_is_playing) this.m_video_control.resume();  doResume(); if (this.m_new_intent) { if (this.m_nfc_module != null) this.m_nfc_module.onNewIntent(((Activity)getContext()).getIntent());  doLaunchDataChanged(); String str = getLaunchUri(); if (str != null) doLaunchFromUrl(str);  this.m_new_intent = false; }  s_running = true; if (this.m_text_editor_visible) showKeyboard();  dispatchNotifications(); for (byte b = 0; b < this.m_lifecycle_listeners.size(); b++) ((LifecycleListener)this.m_lifecycle_listeners.get(b)).OnResume();  if (this.m_wake_on_event) doProcess(false);  } public void onDestroy() { doDestroy(); if (mBillingProvider != null) mBillingProvider.onDestroy();  s_engine_instance = null; } public void onNewIntent(Intent paramIntent) { ((Activity)getContext()).setIntent(paramIntent); this.m_new_intent = true; } public String getPreferredLanguages() { return Locale.getDefault().getLanguage(); } public String getPreferredLocale() { return Locale.getDefault().toString(); } public void doLockIdleTimer() { if (!this.m_wake_lock.isHeld()) this.m_wake_lock.acquire();  } public void doUnlockIdleTimer() { if (this.m_wake_lock.isHeld() == true) this.m_wake_lock.release();  } public boolean getLockIdleTimerLocked() { return this.m_wake_lock.isHeld(); } public String exportImageToAlbum(byte[] paramArrayOfbyte, String paramString1, String paramString2) { String str; Log.i("revandroid", String.format("exportToAlbum called: %s %s", new Object[] { paramString1, paramString2 })); File file1 = null; if (paramArrayOfbyte == null) return "export failed";  File file2 = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES); file2.mkdirs(); if (paramString1.isEmpty()) { UUID uUID = UUID.randomUUID(); Log.i("revandroid", "Generated File Name: " + Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) + "/I" + uUID.toString().substring(0, 7) + paramString2); str = "I" + uUID.toString().substring(0, 7) + paramString2; } else { str = paramString1 + paramString2; }  file1 = new File(file2, str); FileOutputStream fileOutputStream = null; try { fileOutputStream = new FileOutputStream(file1); fileOutputStream.write(paramArrayOfbyte, 0, paramArrayOfbyte.length); fileOutputStream.close(); Intent intent = new Intent("android.intent.action.MEDIA_SCANNER_SCAN_FILE"); intent.setData(Uri.fromFile(file1)); getContext().sendBroadcast(intent); } catch (IOException iOException) { return iOException.toString(); }  return null; } public void pickMedia(String paramString) { Log.i("revandroid", "pickMedia"); Intent intent1 = new Intent("android.intent.action.GET_CONTENT"); Log.i("revandroid", "MIME type: " + paramString); intent1.setType(paramString); Intent intent2 = Intent.createChooser(intent1, ""); ((LiveCodeActivity)getContext()).startActivityForResult(intent2, 5); } private void onMediaResult(int paramInt, Intent paramIntent) { if (paramInt == -1) { Uri uri = paramIntent.getData(); String str = ""; if (uri != null) { Cursor cursor = null; try { cursor = ((LiveCodeActivity)getContext()).getContentResolver().query(uri, null, null, null, null); } catch (SecurityException securityException) {} if (cursor != null) { cursor.moveToFirst(); int i = cursor.getColumnIndex("_data"); if (i > 0) str = cursor.getString(i);  }  Log.i("revandroid", "onMediaResult picked path: " + str); }  doMediaDone(str); } else { Log.i("revandroid", "pickMedia Canceled"); doMediaCanceled(); }  if (this.m_wake_on_event) doProcess(false);  } public int compareInternational(String paramString1, String paramString2) { Log.i("revandroid", "compareInternational"); return this.m_collator.compare(paramString1, paramString2); } public Object createTypefaceFromAsset(String paramString) { Log.i("revandroid", "createTypefaceFromAsset"); return Typeface.createFromAsset(getContext().getAssets(), paramString); } private X509TrustManager getTrustManager() { if (this.m_trust_manager != null) return this.m_trust_manager;  try { TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("X509"); trustManagerFactory.init((KeyStore)null); TrustManager[] arrayOfTrustManager = trustManagerFactory.getTrustManagers(); if (arrayOfTrustManager != null) for (TrustManager trustManager : arrayOfTrustManager) { if (trustManager instanceof X509TrustManager) { this.m_trust_manager = (X509TrustManager)trustManager; break; }  }   } catch (Exception exception) { this.m_trust_manager = null; }  return this.m_trust_manager; } private X509Certificate[] certDataToX509CertChain(Object[] paramArrayOfObject) { X509Certificate[] arrayOfX509Certificate; try { arrayOfX509Certificate = new X509Certificate[paramArrayOfObject.length]; CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509"); for (byte b = 0; b < paramArrayOfObject.length; b++) { byte[] arrayOfByte = (byte[])paramArrayOfObject[b]; ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arrayOfByte); Certificate certificate = certificateFactory.generateCertificate(byteArrayInputStream); arrayOfX509Certificate[b] = (X509Certificate)certificate; }  } catch (Exception exception) { arrayOfX509Certificate = null; }  return arrayOfX509Certificate; } private boolean hostNameMatchesCertificateDNSName(String paramString1, String paramString2) { if (paramString1 == null || paramString1.isEmpty() || paramString2 == null || paramString2.isEmpty()) return false;  paramString1 = paramString1.toLowerCase(); paramString2 = paramString2.toLowerCase(); if (!paramString2.contains("*")) return paramString1.equals(paramString2);  if (paramString2.startsWith("*.") && paramString1.regionMatches(0, paramString2, 2, paramString2.length() - 2)) return true;  String str1 = paramString2.substring(0, paramString2.indexOf('*')); if (str1 != null && !str1.isEmpty() && !paramString1.startsWith(str1)) return false;  String str2 = paramString2.substring(paramString2.indexOf('*') + 1); if (str2 != null && !str2.isEmpty() && !paramString1.endsWith(str2)) return false;  return true; } private boolean hostNameIsValidForCertificate(String paramString, X509Certificate paramX509Certificate) { Collection<List<?>> collection; try { collection = paramX509Certificate.getSubjectAlternativeNames(); } catch (Exception exception) { return false; }  if (collection != null) for (List<?> list : collection) { List<Integer> list1 = (List)list; if (list1 == null || list1.size() < 2) continue;  Integer integer = list1.get(0); if (integer == null || integer.intValue() != 2) continue;  String str = (String)list1.get(1); if (str == null) continue;  if (hostNameMatchesCertificateDNSName(paramString, str)) return true;  }   return false; } public boolean verifyCertificateChainIsTrusted(Object[] paramArrayOfObject, String paramString) { boolean bool = true; X509Certificate[] arrayOfX509Certificate = null; if (bool) { arrayOfX509Certificate = certDataToX509CertChain(paramArrayOfObject); bool = (arrayOfX509Certificate != null); }  X509TrustManager x509TrustManager = null; if (bool) { x509TrustManager = getTrustManager(); bool = (x509TrustManager != null); }  if (bool) try { x509TrustManager.checkServerTrusted(arrayOfX509Certificate, "RSA"); } catch (CertificateException certificateException) { this.m_last_certificate_verification_error = certificateException.toString(); bool = false; }   if (bool) bool = hostNameIsValidForCertificate(paramString, arrayOfX509Certificate[0]);  return bool; }
/*      */   public String getLastCertificateVerificationError() { String str = this.m_last_certificate_verification_error; this.m_last_certificate_verification_error = null; return str; }
/*      */   public Activity getActivity() { return (LiveCodeActivity)getContext(); }
/*      */   public ViewGroup getContainer() { return (ViewGroup)getParent(); }
/*      */   public void runActivity(Intent paramIntent, EngineApi.ActivityResultCallback paramActivityResultCallback) { if (this.m_pending_activity_running) { paramActivityResultCallback.handleActivityResult(0, null); return; }  this.m_pending_activity_running = true; ((LiveCodeActivity)getContext()).startActivityForResult(paramIntent, 14); while (this.m_pending_activity_running) doWait(60.0D, false, true);  Intent intent = this.m_pending_activity_data; int i = this.m_pending_activity_result_code; this.m_pending_activity_data = null; this.m_pending_activity_result_code = 0; paramActivityResultCallback.handleActivityResult(i, intent); }
/*      */   private void onRunActivityResult(int paramInt, Intent paramIntent) { this.m_pending_activity_data = paramIntent; this.m_pending_activity_result_code = paramInt; this.m_pending_activity_running = false; if (this.m_wake_on_event) doProcess(false);  }
/* 3968 */   public int handleStartService(Context paramContext, Intent paramIntent, int paramInt1, int paramInt2) { if (this.m_pending_services == null || this.m_pending_services
/* 3969 */       .isEmpty()) {
/*      */       
/* 3971 */       if (this.m_running_services == null || this.m_running_services
/* 3972 */         .isEmpty()) {
/*      */         
/* 3974 */         Intent intent = new Intent(getContext(), getServiceClass());
/* 3975 */         getContext().stopService(intent);
/* 3976 */         return 2;
/*      */       } 
/* 3978 */       return 1;
/*      */     } 
/*      */     
/* 3981 */     this.m_service_context = paramContext;
/*      */     
/* 3983 */     ServiceListener serviceListener = this.m_pending_services.get(0);
/* 3984 */     this.m_pending_services.remove(0);
/*      */     
/* 3986 */     if (this.m_running_services == null)
/*      */     {
/* 3988 */       this.m_running_services = new ArrayList<>();
/*      */     }
/*      */     
/* 3991 */     this.m_running_services.add(serviceListener);
/* 3992 */     serviceListener.onStart(paramContext);
/*      */     
/* 3994 */     return 1; }
/*      */ 
/*      */ 
/*      */   
/*      */   public void handleFinishService(Context paramContext) {
/* 3999 */     this.m_pending_services = null;
/*      */     
/* 4001 */     while (!this.m_running_services.isEmpty()) {
/*      */       
/* 4003 */       ((ServiceListener)this.m_running_services.get(0)).onFinish(paramContext);
/* 4004 */       this.m_running_services.remove(0);
/*      */     } 
/* 4006 */     this.m_running_services = null;
/*      */     
/* 4008 */     this.m_service_context = null;
/*      */   }
/*      */ 
/*      */   
/*      */   public Class getServiceClass() {
/* 4013 */     return ((LiveCodeActivity)getContext()).getServiceClass();
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public int getSystemAppearance() {
/* 4020 */     switch (this.m_night_mode) {
/*      */       
/*      */       case 32:
/* 4023 */         return 1;
/*      */     } 
/*      */ 
/*      */     
/* 4027 */     return 0;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean registerLifecycleListener(LifecycleListener paramLifecycleListener) {
/* 4035 */     return this.m_lifecycle_listeners.add(paramLifecycleListener);
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean unregisterLifecycleListener(LifecycleListener paramLifecycleListener) {
/* 4043 */     for (int i = this.m_lifecycle_listeners.size() - 1; i >= 0; i--) {
/*      */       
/* 4045 */       if (this.m_lifecycle_listeners.get(i) == paramLifecycleListener) {
/*      */         
/* 4047 */         this.m_lifecycle_listeners.remove(i);
/* 4048 */         return true;
/*      */       } 
/*      */     } 
/*      */     
/* 4052 */     return false;
/*      */   }
/*      */   
/*      */   public static native void doLaunchFromUrl(String paramString);
/*      */   
/*      */   public static native void doLaunchDataChanged();
/*      */   
/*      */   public static native void doPurchaseStateChanged(boolean paramBoolean, int paramInt, String paramString1, String paramString2, String paramString3, long paramLong, String paramString4, String paramString5, String paramString6);
/*      */   
/*      */   public static native void doConfirmNotificationResponse(int paramInt1, int paramInt2);
/*      */   
/*      */   public static native void doRestoreTransactionsResponse(int paramInt);
/*      */   
/*      */   public static native void doRequestPurchaseResponse(int paramInt1, int paramInt2);
/*      */   
/*      */   public static native void doProductDetailsResponse(String paramString);
/*      */   
/*      */   public static native void doProductDetailsError(String paramString1, String paramString2);
/*      */   
/*      */   public static native void doCreate(Activity paramActivity, FrameLayout paramFrameLayout, Engine paramEngine);
/*      */   
/*      */   public static native void doDestroy();
/*      */   
/*      */   public static native void doRestart(Engine paramEngine);
/*      */   
/*      */   public static native void doStart();
/*      */   
/*      */   public static native void doStop();
/*      */   
/*      */   public static native void doPause();
/*      */   
/*      */   public static native void doResume();
/*      */   
/*      */   public static native void doLowMemory();
/*      */   
/*      */   public static native void doNativeNotify(long paramLong1, long paramLong2);
/*      */   
/*      */   public static native void doProcess(boolean paramBoolean);
/*      */   
/*      */   public static native void doReconfigure(int paramInt1, int paramInt2, int paramInt3, int paramInt4, Bitmap paramBitmap);
/*      */   
/*      */   public static native String doGetCustomPropertyValue(String paramString1, String paramString2);
/*      */   
/*      */   public static native Rect doGetFocusedRect();
/*      */   
/*      */   public static native void doWait(double paramDouble, boolean paramBoolean1, boolean paramBoolean2);
/*      */   
/*      */   public static native void doLocationChanged(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, float paramFloat, double paramDouble5, double paramDouble6);
/*      */   
/*      */   public static native void doHeadingChanged(double paramDouble1, double paramDouble2, double paramDouble3, double paramDouble4, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4);
/*      */   
/*      */   public static native void doAccelerationChanged(float paramFloat1, float paramFloat2, float paramFloat3, double paramDouble);
/*      */   
/*      */   public static native void doRotationRateChanged(float paramFloat1, float paramFloat2, float paramFloat3, double paramDouble);
/*      */   
/*      */   public static native void doBackPressed();
/*      */   
/*      */   public static native void doMenuKey();
/*      */   
/*      */   public static native void doSearchKey();
/*      */   
/*      */   public static native void doTouch(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5);
/*      */   
/*      */   public static native void doKeyPress(int paramInt1, int paramInt2, int paramInt3);
/*      */   
/*      */   public static native void doShake(int paramInt, long paramLong);
/*      */   
/*      */   public static native void doOrientationChanged(int paramInt);
/*      */   
/*      */   public static native void doSystemAppearanceChanged();
/*      */   
/*      */   public static native void doKeyboardShown(int paramInt);
/*      */   
/*      */   public static native void doKeyboardHidden();
/*      */   
/*      */   public static native void doAnswerDialogDone(int paramInt);
/*      */   
/*      */   public static native void doAskDialogDone(String paramString);
/*      */   
/*      */   public static native void doDatePickerDone(int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean);
/*      */   
/*      */   public static native void doTimePickerDone(int paramInt1, int paramInt2, boolean paramBoolean);
/*      */   
/*      */   public static native void doListPickerDone(int paramInt, boolean paramBoolean);
/*      */   
/*      */   public static native void doAskPermissionDone(boolean paramBoolean);
/*      */   
/*      */   public static native void doMovieStopped();
/*      */   
/*      */   public static native void doMovieTouched();
/*      */   
/*      */   public static native void doUrlDidStart(int paramInt);
/*      */   
/*      */   public static native void doUrlDidConnect(int paramInt1, int paramInt2);
/*      */   
/*      */   public static native void doUrlDidRequest(int paramInt);
/*      */   
/*      */   public static native void doUrlDidSendData(int paramInt1, int paramInt2);
/*      */   
/*      */   public static native void doUrlDidReceiveData(int paramInt1, byte[] paramArrayOfbyte, int paramInt2);
/*      */   
/*      */   public static native void doUrlDidFinish(int paramInt);
/*      */   
/*      */   public static native void doUrlError(int paramInt, String paramString);
/*      */   
/*      */   public static native void doPhotoPickerCanceled();
/*      */   
/*      */   public static native void doPhotoPickerDone(byte[] paramArrayOfbyte, int paramInt);
/*      */   
/*      */   public static native void doPhotoPickerError(String paramString);
/*      */   
/*      */   public static native void doMailDone();
/*      */   
/*      */   public static native void doMailCanceled();
/*      */   
/*      */   public static native void doTextDone();
/*      */   
/*      */   public static native void doTextCanceled();
/*      */   
/*      */   public static native void doMediaDone(String paramString);
/*      */   
/*      */   public static native void doMediaCanceled();
/*      */   
/*      */   public static native void doPickContactDone(int paramInt);
/*      */   
/*      */   public static native void doPickContactCanceled(int paramInt);
/*      */   
/*      */   public static native void doShowContact(int paramInt);
/*      */   
/*      */   public static native void doUpdateContactDone(int paramInt);
/*      */   
/*      */   public static native void doUpdateContactCanceled(int paramInt);
/*      */   
/*      */   public static native void doCreateContactDone(int paramInt);
/*      */   
/*      */   public static native void doCreateContactCanceled(int paramInt);
/*      */   
/*      */   public static native void doShowContactDone(int paramInt);
/*      */   
/*      */   public static native void doShowContactCanceled(int paramInt);
/*      */   
/*      */   public static native void doFindContact(String paramString);
/*      */   
/*      */   public static native void doShowCalendarEvent(String paramString);
/*      */   
/*      */   public static native void doGetCalendarEventData(String paramString1, String paramString2, String paramString3, String paramString4, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3, int paramInt1, boolean paramBoolean4, int paramInt2, int paramInt3, int paramInt4, String paramString5, int paramInt5, int paramInt6, String paramString6);
/*      */   
/*      */   public static native void doUpdateCalendarEventDone(String paramString);
/*      */   
/*      */   public static native void doUpdateCalendarEventCanceled(String paramString);
/*      */   
/*      */   public static native void doCreateCalendarEventDone(String paramString);
/*      */   
/*      */   public static native void doCreateCalendarEventCanceled(String paramString);
/*      */   
/*      */   public static native void doShowCalendarEventDone(String paramString);
/*      */   
/*      */   public static native void doShowCalendarEventCanceled(String paramString);
/*      */   
/*      */   public static native void doAddCalendarEvent(String paramString);
/*      */   
/*      */   public static native void doFindCalendarEvent(String paramString);
/*      */   
/*      */   public static native void doRemoveCalendarEvent(String paramString);
/*      */   
/*      */   public static interface ServiceListener {
/*      */     void onStart(Context param1Context);
/*      */     
/*      */     void onFinish(Context param1Context);
/*      */   } }


/* Location:              /Users/paul/Desktop/OpenXTalk 1.963.1rc3.app/Contents/Tools/Runtime/Android/Classes.jar!/com/runrev/android/Engine.class
 * Java compiler version: 7 (51.0)
 * JD-Core Version:       1.1.3
 */